CONFIG_MTD_DOC1000
  This provides an MTD device driver for the M-Systems DiskOnChip
  1000 devices, which are obsolete so you probably want to say 'N'.

CONFIG_MTD_DOC2000
  This provides an MTD device driver for the M-Systems DiskOnChip
  2000 and Millennium devices.  Originally designed for the DiskOnChip
  2000, it also now includes support for the DiskOnChip Millennium.
  If you have problems with this driver and the DiskOnChip Millennium,
  you may wish to try the alternative Millennium driver below. To use
  the alternative driver, you will need to undefine DOC_SINGLE_DRIVER
  in the <file:drivers/mtd/devices/docprobe.c> source code.

  If you use this device, you probably also want to enable the NFTL
  'NAND Flash Translation Layer' option below, which is used to
  emulate a block device by using a kind of file system on the flash
  chips.

CONFIG_MTD_DOC2001
  This provides an alternative MTD device driver for the M-Systems 
  DiskOnChip Millennium devices.  Use this if you have problems with
  the combined DiskOnChip 2000 and Millennium driver above.  To get
  the DiskOnChip probe code to load and use this driver instead of
  the other one, you will need to undefine DOC_SINGLE_DRIVER near
  the beginning of <file:drivers/mtd/devices/docprobe.c>.

  If you use this device, you probably also want to enable the NFTL
  'NAND Flash Translation Layer' option below, which is used to
  emulate a block device by using a kind of file system on the flash
  chips.

CONFIG_MTD_DOCPROBE
  This isn't a real config option, it's derived.

CONFIG_MTD_DOCPROBE_ADVANCED
  This option allows you to specify nonstandard address at which to
  probe for a DiskOnChip, or to change the detection options.  You
  are unlikely to need any of this unless you are using LinuxBIOS.
  Say 'N'.

CONFIG_MTD_DOCPROBE_55AA
  Check for the 0x55 0xAA signature of a DiskOnChip, and do not
  continue with probing if it is absent.  The signature will always be
  present for a DiskOnChip 2000 or a normal DiskOnChip Millennium.
  Only if you have overwritten the first block of a DiskOnChip
  Millennium will it be  absent.  Enable this option if you are using
  LinuxBIOS or if you need to recover a DiskOnChip Millennium on which
  you have managed to wipe the first block.

CONFIG_MTD_DOCPROBE_ADDRESS
  By default, the probe for DiskOnChip devices will look for a
  DiskOnChip at every multiple of 0x2000 between 0xC8000 and 0xEE000.
  This option allows you to specify a single address at which to probe
  for the device, which is useful if you have other devices in that
  range which get upset when they are probed.

  (Note that on PowerPC, the normal probe will only check at
  0xE4000000.)

  Normally, you should leave this set to zero, to allow the probe at
  the normal addresses.

CONFIG_MTD_DOCPROBE_HIGH
  By default, the probe for DiskOnChip devices will look for a
  DiskOnChip at every multiple of 0x2000 between 0xC8000 and 0xEE000.
  This option changes to make it probe between 0xFFFC8000 and
  0xFFFEE000.  Unless you are using LinuxBIOS, this is unlikely to be
  useful to you.  Say 'N'.

CONFIG_MTD_PMC551
  This provides a MTD device driver for the Ramix PMC551 RAM PCI card
  from Ramix Inc. <http://www.ramix.com/products/memory/pmc551.html>.
  These devices come in memory configurations from 32M - 1G.  If you
  have one, you probably want to enable this.

  If this driver is compiled as a module you get the ability to select
  the size of the aperture window pointing into the devices memory.
  What this means is that if you have a 1G card, normally the kernel
  will use a 1G memory map as its view of the device.  As a module,
  you can select a 1M window into the memory and the driver will
  "slide" the window around the PMC551's memory.  This was
  particularly useful on the 2.2 kernels on PPC architectures as there
  was limited kernel space to deal with.

CONFIG_MTD_PMC551_BUGFIX
  Some of Ramix's PMC551 boards with 256M configurations have invalid
  column and row mux values.  This option will fix them, but will
  break other memory configurations.  If unsure say N.

CONFIG_MTD_PMC551_DEBUG
  This option makes the PMC551 more verbose during its operation and
  is only really useful if you are developing on this driver or
  suspect a possible hardware or driver bug.  If unsure say N.

CONFIG_MTD_SLRAM
  If your CPU cannot cache all of the physical memory in your machine,
  you can still use it for storage or swap by using this driver to
  present it to the system as a Memory Technology Device.

CONFIG_MTD_MTDRAM
  This enables a test MTD device driver which uses vmalloc() to
  provide storage.  You probably want to say 'N' unless you're
  testing stuff.

CONFIG_MTDRAM_ERASE_SIZE
  This allows you to configure the size of the erase blocks in the
  device emulated by the MTDRAM driver.  If the MTDRAM driver is built
  as a module, it is also possible to specify this as a parameter when
  loading the module.

CONFIG_MTDRAM_TOTAL_SIZE
  This allows you to configure the total size of the MTD device
  emulated by the MTDRAM driver.  If the MTDRAM driver is built
  as a module, it is also possible to specify this as a parameter when
  loading the module.

CONFIG_MTDRAM_ABS_POS
  If you have system RAM accessible by the CPU but not used by Linux
  in normal operation, you can give the physical address at which the
  available RAM starts, and the MTDRAM driver will use it instead of
  allocating space from Linux's available memory. Otherwise, leave 
  this set to zero. Most people will want to leave this as zero.

CONFIG_MTD_BLKMTD
  This driver allows a block device to appear as an MTD. It would
  generally be used in the following cases:

    Using Compact Flash as an MTD, these usually present themselves to
    the system as an ATA drive.
    Testing MTD users (eg JFFS2) on large media and media that might
    be removed during a write (using the floppy drive).

CONFIG_MTD_LART
  This enables the flash driver for LART. Please note that you do
  not need any mapping/chip driver for LART. This one does it all
  for you, so go disable all of those if you enabled some of them (:

