CONFIG_MTD
  Memory Technology Devices are flash, RAM and similar chips, often
  used for solid state file systems on embedded devices. This option
  will provide the generic support for MTD drivers to register
  themselves with the kernel and for potential users of MTD devices
  to enumerate the devices which are present and obtain a handle on
  them. It will also allow you to select individual drivers for 
  particular hardware and users of MTD devices. If unsure, say N.

CONFIG_MTD_DEBUG
  This turns on low-level debugging for the entire MTD sub-system.
  Normally, you should say 'N'.

CONFIG_MTD_PARTITIONS
  If you have a device which needs to divide its flash chip(s) up
  into multiple 'partitions', each of which appears to the user as
  a separate MTD device, you require this option to be enabled. If
  unsure, say 'Y'.

  Note, however, that you don't need this option for the DiskOnChip
  devices. Partitioning on NFTL 'devices' is a different - that's the
  'normal' form of partitioning used on a block device.

CONFIG_MTD_REDBOOT_PARTS
  RedBoot is a ROM monitor and bootloader which deals with multiple
  'images' in flash devices by putting a table in the last erase block
  of the device, similar to a partition table, which gives the
  offsets, lengths and names of all the images stored in the flash.

  If you need code which can detect and parse this table, and register
  MTD 'partitions' corresponding to each image in the table, enable
  this option.

  You will still need the parsing functions to be called by the driver
  for your particular device. It won't happen automatically. The
  SA1100 map driver (CONFIG_MTD_SA1100) has an option for this, for
  example.

CONFIG_MTD_BOOTLDR_PARTS
  The Compaq bootldr deals with multiple 'images' in flash devices
  by putting a table in one of the first erase blocks of the device,
  similar to a partition table, which gives the offsets, lengths and
  names of all the images stored in the flash.

  If you need code which can detect and parse this table, and register
  MTD 'partitions' corresponding to each image in the table, enable
  this option.

  You will still need the parsing functions to be called by the driver
  for your particular device. It won't happen automatically. The 
  SA1100 map driver (CONFIG_MTD_SA1100) has an option for this, for 
  example.

CONFIG_MTD_AFS_PARTS
  The ARM Firmware Suite allows the user to divide flash devices into
  multiple 'images'. Each such image has a header containing its name
  and offset/size etc.

  If you need code which can detect and parse these tables, and
  register MTD 'partitions' corresponding to each image detected,
  enable this option.

  You will still need the parsing functions to be called by the driver
  for your particular device.  It won't happen automatically.  The 
  'armflash' map driver (CONFIG_MTD_ARMFLASH) does this, for example.

CONFIG_MTD_DEBUG_VERBOSE
  Determines the verbosity level of the MTD debugging messages.

CONFIG_MTD_CHAR
  This provides a character device for each MTD device present in
  the system, allowing the user to read and write directly to the
  memory chips, and also use ioctl() to obtain information about
  the device, or to erase parts of it.

CONFIG_MTD_BLOCK
  Although most flash chips have an erase size too large to be useful
  as block devices, it is possible to use MTD devices which are based
  on RAM chips in this manner. This block device is a user of MTD
  devices performing that function.

  At the moment, it is also required for the Journalling Flash File
  System(s) to obtain a handle on the MTD device when it's mounted
  (although JFFS and JFFS2 don't actually use any of the functionality
  of the mtdblock device).

  Later, it may be extended to perform read/erase/modify/write cycles
  on flash chips to emulate a smaller block size. Needless to say,
  this is very unsafe, but could be useful for file systems which are
  almost never written to.

  You do not need this option for use with the DiskOnChip devices. For
  those, enable NFTL support (CONFIG_NFTL) instead.

CONFIG_MTD_BLOCK_RO
  This allows you to mount read-only file systems (such as cramfs)
  from an MTD device, without the overhead (and danger) of the caching
  driver.

  You do not need this option for use with the DiskOnChip devices. For
  those, enable NFTL support (CONFIG_NFTL) instead.

CONFIG_FTL
  This provides support for the original Flash Translation Layer which
  is part of the PCMCIA specification. It uses a kind of pseudo-
  file system on a flash device to emulate a block device with
  512-byte sectors, on top of which you put a 'normal' file system.

  You may find that the algorithms used in this code are patented
  unless you live in the Free World where software patents aren't
  legal - in the USA you are only permitted to use this on PCMCIA
  hardware, although under the terms of the GPL you're obviously
  permitted to copy, modify and distribute the code as you wish. Just
  not use it.

CONFIG_NFTL
  This provides support for the NAND Flash Translation Layer which is
  used on M-Systems' DiskOnChip devices. It uses a kind of pseudo-
  file system on a flash device to emulate a block device with
  512-byte sectors, on top of which you put a 'normal' file system.

  You may find that the algorithms used in this code are patented
  unless you live in the Free World where software patents aren't
  legal - in the USA you are only permitted to use this on DiskOnChip
  hardware, although under the terms of the GPL you're obviously
  permitted to copy, modify and distribute the code as you wish. Just
  not use it.

CONFIG_NFTL_RW
  If you're lucky, this will actually work. Don't whinge if it
  doesn't.  Send mail to the MTD mailing list
  <linux-mtd@lists.infradead.org> if you want to help to make it more
  reliable.

