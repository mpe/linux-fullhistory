                       Readme-File README.aztcd
   for Aztech CD-ROM CDA268-01A, ORCHID CD-3110, OKANO/WEARNES CDD110 
                          CD-ROM  Driver 
                    BETA-Version 0.6 and newer
                   (for other drives see 6.-8.)

NOTE: THIS DRIVER WILL WORK WITH THE CD-ROM DRIVES LISTED, WHICH HAVE
      A PROPRIETARY INTERFACE (implemented on a sound card or on a
      ISA-AT-bus card). 
      IT WILL DEFINITELY NOT WORK WITH CD-ROM DRIVES WITH *IDE*-INTERFACE,
      such as the Aztech CDA269-031SE !!! IF YOU'RE USING A CD-ROM DRIVE
      WITH IDE-INTERFACE, SOMETIMES ALSO CALLED ATAPI-COMPATIBLE, PLEASE 
      USE THE ide-cd.c DRIVER, WRITTEN BY MARK LORD AND SCOTT SNYDER !!!
----------------------------------------------------------------------------
Contents of this file:
                         1. NOTE
                         2. INSTALLATION
                         3. CONFIGURING YOUR KERNEL
                         4. RECOMPILING YOUR KERNEL
                         5. KNOWN PROBLEMS, FUTURE DEVELOPMENTS
                         6. BUG REPORTS
                         7. OTHER DRIVES
                         8. IF YOU DON'T SUCCEED ... DEBUGGING  
                         9. TECHNICAL HISTORY OF THE DRIVER
                        10. ACKNOWLEDGMENTS
                        11. PROGRAMMING ADD ONS: CDPLAY.C
                        APPENDIX: Source code of cdplay.c
----------------------------------------------------------------------------

1. NOTE 
This software has now been tested in some different machines with AZTECH
CDA268-01A, ORCHID CDS-3110 and ORCHID/WEARNES CDD110 and has proven to be 
pretty stable with kernel versions 1.0.0 to 1.1.75. Nevertheless I'd only
assign BETA status to the software, as the number of known users is still 
small. So when in 'day to day' use or when used with different firmware
versions of the CD-ROM drives, there still may be some problems. So I'm 
quite sure I'll see some bug reports (see chapter BUG REPORTS) and you are
invited in helping us to increase the number of drives, which are supported,
and in debugging this software (see chapters OTHER DRIVES and DEBUGGING).

Please read the README-files carefully and always keep a backup copy of your 
old kernel, in order to reboot if something goes wrong!


2. INSTALLATION
If you received this software as a standalone package AZTECH.CDROM.Vxx.tgz 
(xx=version number) and not included in the standard Linux kernel, read the 
file AZTECH.CDROM.README included in that package to install it. The 
standalone package's home is 'ftp.gwdg.de : pub/linux/cdrom/drivers/aztech'.
The driver consists of a header file 'aztcd.h', which normally should reside 
in /usr/include/linux and the source code 'aztcd.c', which normally resides in
/usr/src/linux/drivers/block. It uses /dev/aztcd0, which must be a valid block
device with major number 29 and reside in directory /dev. To mount a CD-ROM,
your kernel needs to have the ISO9660-filesystem support included.


3. CONFIGURING YOUR KERNEL
If your kernel is already configured for using the AZTECH driver you will
see the following message while Linux boots:
    Aztech CD-ROM Init: DriverVersion=<version number> BaseAddress=<baseaddress>
    Aztech CD-ROM Init: FirmwareVersion=<firmware version id of your I/O-card>>>
    Aztech CD-ROM Init: <drive type> detected
    Aztech CD-ROM Init: End
If the message looks different and you are sure to have a supported drive,
it may have a different base address. The Aztech driver does look for the 
CD-ROM drive at the base address specified in aztcd.h at compile time. This 
address can be overwritten by boot parameter aztcd=....You should reboot and 
start Linux with boot parameter aztcd=<base address>, e.g. aztcd=0x320. If 
you do not know the base address, start your PC with DOS and look at the boot 
message of your CD-ROM's DOS driver. 

If the message looks correct, as user 'root' you should be able to mount the 
drive by
          mount -t iso9660 -r /dev/aztcd0 /mnt
and use it as any other filesystem. (If this does not work, check if
  /dev/aztcd0 and /mnt do exist and create them, if necessary by doing
      mknod /dev/aztcd0 b 29 0
      mkdir /mnt                       

If you still get a different message while Linux boots or when you get the 
message, that the ISO9660-filesystem is not supported by your kernel, when
you try to mount the CD-ROM drive, you have to recompile your kernel.

If you do *not* have an Aztech/Orchid/Okano/Wearnes drive and want to bypass
drive detection during Linux boot up, start with boot parameter aztcd=0.

Joe Nardone has compiled a boot disk with the Aztech driver for installing 
Slackware from CDROM. You can find the disk images at 'sunsite.unc.edu'; 
see file 'aztech.gz.README' for instructions on how to use it.

4. RECOMPILING YOUR KERNEL
If your kernel is not yet configured for the AZTECH driver and the ISO9660-
filesystem, you have to recompile your kernel: 

- Edit aztcd.h to set the I/O-address to your I/O-Base address (AZT_BASE_ADDR), 
  the driver does not use interrupts or DMA, so if you are using an AZTECH
  CD268, an ORCHID CD-3110 or ORCHID/WEARNES CDD110 that's the only item you 
  have to set up. 
  Users of other drives should read chapter OTHER DRIVES of this file.
  You also can configure that address by LILO boot parameter aztcd=... 
- Build a new kernel, configure it for 'Aztech/Orchid/Okano/Wearnes support' 
  and include the ISO9660-filesystem. 
- Activate the new kernel, normally this is done by running lilo (don't for-
  get to configure it before and to keep a copy of your old kernel in case
  something goes wrong!).
- Reboot
- You now should see during boot some messages like
    Aztech CD-ROM Init: DriverVersion=<version number> BaseAddress=<baseaddress>
    Aztech CD-ROM Init: FirmwareVersion=<firmware version id of your I/O-card>
    Aztech CD-ROM Init: <drive type> detected
    Aztech CD-ROM Init: End
- If the message looks correct, as user 'root' you should be able to mount 
  the drive by
          mount -t iso9660 -r /dev/aztcd0 /mnt
  and use it as any other filesystem. (If this does not work, check if
  /dev/aztcd0 and /mnt do exist and create them, if necessary by doing
      mknod /dev/aztcd0 b 29 0
      mkdir /mnt                       
- If this still does not help, see chapters OTHER DRIVES and DEBUGGING.


5. KNOWN PROBLEMS, FUTURE DEVELOPMENTS
The driver does not support applications such as photo CD, multi session CD
etc.. I do not plan to include the support for that in the driver, because I
do not use such applications. If you are interested in that stuff and would
like to extend the drivers capability on your own, please contact me, I'll
support you as far as I can. 

The drive status recognition does not work correctly in all cases. Changing
a disk or having the door open, when a drive is already mounted, is detected 
by the Aztech driver itself, but nevertheless causes multiple read attempts
by the different layers of the ISO9660-filesystem driver, which finally timeout,
so you have to wait quite a little... But isn't it bad style to change a disk 
in a mounted drive, anyhow ?!

The driver uses busy wait in most cases for the drive handshake (macros
STEN_LOW and DTEN_LOW). I tested with a 486/DX2 at 66MHz and a Pentium at
60MHz. Whenever you use a much faster machine you are likely to get timeout 
messages. In that case edit aztcd.h and increase the timeout value AZT_TIMEOUT. 

For some 'slow' drive commands I implemented waiting with a timer waitqueue
(macro STEN_LOW_WAIT). If you get this timeout message, you may also edit
aztcd.h and increase the timeout value AZT_STATUS_DELAY. The waitqueue has
shown to be a little critical. If you get kernel panic messages, edit aztcd.c
and substitute STEN_LOW_WAIT by STEN_LOW. Busy waiting with STEN_LOW is more
stable, but also causes CPU overhead.


6. BUG REPORTS
Please send detailed bug reports and bug fixes via EMail to

        zimmerma@rz.fht-esslingen.de

Please include a description of your CD-ROM drive type and interface card, 
the exact firmware message during Linux bootup, the version number of the 
AZTECH-CDROM-driver and the Linux kernel version. Also a description of your 
system's other hardware could be of interest, especially microprocessor type, 
clock frequency, other interface cards such as soundcards, ethernet adapter, 
game cards etc..

I will try to collect the reports and make the necessary modifications from 
time to time. I may also come back to you directly with some bug fixes and 
ask you to do further testing and debugging.

Editors of CD-ROMs are invited to send a 'cooperation' copy of their
CD-ROMs to the volunteers, who provided the CD-ROM support for Linux. My
snail mail address for such 'stuff' is
           Prof. Dr. W. Zimmermann
           Fachhochschule fuer Technik Esslingen
           Fachbereich NT
           Flandernstrasse 101
           D-73732 Esslingen
           Germany


7. OTHER DRIVES
The following drives ORCHID CDS3110, OKANO CDD110 and WEARNES nearly look 
the same as AZTECH CDA268-01A, especially they seem to use the same command 
codes. So it was quite simple to make the AZTECH driver work with these drives. 

Unfortunately I do not have any of these drives available, so I couldn't test
it myself. But I've got reports, that it works with ORCHID CDS3110 and Game-
Wave32 sound cards and also with WEARNES CDD110 in some different combinations. 
In some installations, it seems necessary to initialize the drive with the DOS 
driver before (especially if combined with a sound card) and then do a warm 
boot (CTRL-ALT-RESET) or start Linux from DOS, e.g. with 'loadlin'.

Please give me positive or negative feedback, if you have tried it. Especially
you should tell me, how the version string reads during initialization. If you
don't succeed, read chapter DEBUGGING. Thanks in advance!

Sorry for the inconvenience, but it is difficult to develop for hardware, 
which you don't have available for testing. So if you like, please help us.


8. DEBUGGING : IF YOU DON'T SUCCEED, TRY THE FOLLOWING
-reread the complete README file
-make sure, that your drive is hardware configured for 
    transfer mode: polled
    IRQ:           not used
    DMA:           not used
    Base Address:  something like 300, 320 ...
 You can check this, when you start the DOS driver, which came with your
 drive. By appropriately configuring the drive and the DOS driver you can
 check, whether your drive does operate in this mode correctly under DOS. If
 it does not operate under DOS, it won't under Linux.
 Make sure the Base Address is configured correctly in aztcd.h, also make
 sure, that /dev/aztcd0 exists with the correct major number (compare it with
 the entry in file /usr/include/linux/major.h for the Aztech drive). 
-insert a CD-ROM and close the tray
-cold boot your PC (i.e. via the power on switch or the reset button)
-if you start Linux via DOS, e.g. using loadlin, make sure, that the DOS
 driver for the CD-ROM drive is not loaded (comment out the calling lines 
 in DOS' config.sys!)
-look for the aztcd: init message during Linux init and note them exactly
-log in as root and do a mount -t iso9660 /dev/aztcd0 /mnt
-if you don't succeed in the first time, try several times. Try also to open
 and close the tray, then mount again. Please note carefully all commands
 you typed in and the aztcd-messages, which you get.
-if you get an 'Aztech CD-ROM init: aborted' message, read the remarks about
 the version string below.

If this does not help, do the same with the following differences 
-start DOS before; make now sure, that the DOS driver for the CD-ROM is 
 loaded under DOS (i.e. uncomment it again in config.sys)
-warm boot your PC (i.e. via CTRL-ALT-DEL)
 if you have it, you can also start via loadlin (try both).
 ...
 Again note all commands and the aztcd-messages.

If you see STEN_LOW or STEN_LOW_WAIT error messages, increase the timeout
values.

If this still does not help, 
-look in aztcd.c for the lines  #if 0
                                #define AZT_TEST1
                                ...
                                #endif
 and substitute '#if 0' by '#if 1'.
-recompile your kernel and repeat the above two procedures. You will now get 
 a bundle of debugging messages from the driver. Again note your commands
 and the appropriate messages. If you have syslogd running, these messages
 may also be found in syslogd's kernel log file. Nevertheless in some
 installations syslogd does not yet run, when init() is called, thus look for
 the aztcd-messages during init, before the login-prompt appears.
 Then look in aztcd.c, to find out, what happened. The normal calling sequence 
 is: aztcd_init() during Linux bootup procedure init()
 after doing a 'mount -t iso9660 /dev/aztcd0 /mnt' the normal calling sequence is
     aztcd_open()    -> Status 2c after cold reboot with CDROM or audio CD inserted
                     -> Status 8  after warm reboot with CDROM inserted          
                     -> Status 2e after cold reboot with no disk, closed tray
                     -> Status 6e after cold reboot, mount with door open
     aztUpdateToc()
     aztGetDiskInfo()
     aztGetQChannelInfo()   repeated several times
     aztGetToc()
     aztGetQChannelInfo()   repeated several times
     a list of track informations
     do_aztcd_request()  }  
     azt_transfer()    } repeated several times
     azt_poll          }
 Check, if there is a difference in the calling sequence or the status flags!
 
 There are a lot of other messages, eg. the ACMD-command code (defined in
 aztcd.h), status info from the getAztStatus-command and the state sequence of
 the finite state machine in azt_poll(). The most important are the status
 messages, look how they are defined and try to understand, if they make
 sense in the context where they appear. With a CD-ROM inserted the status 
 should always be 8, except in aztcd_open(). Try to open the tray, insert a
 audio disk, insert no disk or reinsert the CD-ROM and check, if the status
 bits change accordingly. The status bits are the most likely point, where 
 the drive manufacturers may implement changes.
            
If you still don't succeed, a good point to start is to look in aztcd.c in 
function aztcd_init, where the drive should be detected during init. Do the
following:
-reboot the system with boot parameter 'aztcd=<your base address>,0x79'. With
 parameter 0x79 most of the drive version detection is bypassed. After that 
 you should see the complete version string including leading and trailing 
 blanks during init. 
 Now adapt the statement
      if ((result[1]=='A')&&(result[2]=='Z' ...)
 in aztcd_init() to exactly match the first 3 or 4 letters you have seen.
-Another point is the 'smart' card detection feature in aztcd_init(). Normally
 the CD-ROM drive is ready, when aztcd_init is trying to read the version
 string and a time consuming ACMD_SOFT_RESET command can be avoided. This is
 detected by looking, if AFL_OP_OK can be read correctly. If the CD-ROM drive 
 hangs in some unknown state, e.g. because of an error before a warm start or 
 because you first operated under DOS, even the version string may be correct, 
 but the following commands will not. Then change the code in such a way, 
 that the ACMD_SOFT_RESET is issued in any case, by substituting the
 if-statement 'if ( ...=AFL_OP_OK)' by 'if (1)'.

If you succeed, please mail may the exact version string of your drive and
the code modifications, you have made together with a short explanation.
If you don't succeed, you may mail me the output of the debugging messages.
But remember, they are only useful, if they are exact and complete and you
describe in detail your hardware setup and what you did (cold/warm reboot,
with/without DOS, DOS-driver started/not started, which Linux-commands etc.)


9. TECHNICAL HISTORY OF THE DRIVER
The AZTECH-Driver is a rework of the Mitsumi-Driver. Four major items had to
be reworked:

a) The Mitsumi drive does issue complete status information acknowledging
each command, the Aztech drive does only signal that the command was
processed. So whenever the complete status information is needed, an extra
ACMD_GET_STATUS command is issued. The handshake procedure for the drive
can be found in the functions aztSendCmd(), sendAztCmd() and getAztStatus().

b) The Aztech Drive does not have a ACMD_GET_DISK_INFO command, so the
necessary info about the number of tracks (firstTrack, lastTrack), disk
length etc. has to be read from the TOC in the lead in track (see function
aztGetDiskInfo()).

c) Whenever data is read from the drive, the Mitsumi drive is started with a
command to read an indefinite (0xffffff) number of sectors. When the appropriate 
number of sectors is read, the drive is stopped by a ACDM_STOP command. This
does not work with the Aztech drive. I did not find a way to stop it. The
stop and pause commands do only work in AUDIO mode but not in DATA mode.
Therefore I had to modify the 'finite state machine' in function azt_poll to
only read a certain number of sectors and then start a new read on demand. As I 
have not completely understood, how the buffer/caching scheme of the Mitsumi 
driver was implemented, I am not sure, if I have covered all cases correctly, 
whenever you get timeout messages, the bug is most likely to be in that
function azt_poll() around switch(cmd) .... case ACD_S_DATA. 

d) I did not get information about changing drive mode. So I doubt, that the
code around function azt_poll() case AZT_S_MODE does work. In my test I have
not been able to switch to reading in raw mode. For reading raw mode, Aztech
uses a different command than for cooked mode, which I only have implemen-
ted in the ioctl-section but not in the section which is used by the ISO9660- 

The driver was developed on an AST PC with Intel 486/DX2, 8MB RAM, 340MB IDE 
hard disk and on an AST PC with Intel Pentium 60MHz, 16MB RAM, 520MB IDE 
running Linux kernel version 1.0.9 from the LST 1.8 Distribution. The kernel 
was compiled with gcc.2.5.8. My CD-ROM drive is an Aztech CDA268-01A. My
drive says, that it has Firmware Version AZT26801A1.3. It came with a ISA-bus
interface card and works with polled I/O without DMA and without interrupts.
The code for all other drives was 'remote' tested and debugged by a number of 
volunteers on the Internet.

Points, where I feel that possible problems might be and all points where I 
did not completely understand the drive's behaviour or trust my own code are 
marked with /*???*/ in the source code. There are also some parts in the 
Mitsumi driver, where I did not completely understand their code.


10. ACKNOWLEDGMENTS
Without the help of P.Bush, Aztech, who delivered technical information
about the Aztech Drive and without the help of E.Moenkeberg, GWDG, who did a
great job in analyzing the command structure of various CD-ROM drives, this
work would not have been possible. E.Moenkeberg was also a great help in 
making the software 'kernel ready' and in answering many of the CDROM-related 
questions in the newsgroups. He really is *the* Linux CD-ROM guru. Thanks 
also to all the guys on the Internet, who collected valuable technical 
information about CDROMs. 

Joe Nardone (nardone@clark.net) was a patient tester even for my first
trial, which was more than slow, and made suggestions for code improvement.
Especially the 'finite state machine' azt_poll() was rewritten by Joe to get
clean C code and avoid the ugly 'gotos', which I copied from mcd.c.

Robby Schirmer (schirmer@fmi.uni-passau.de) tested the audio stuff (ioctls) 
and suggested a lot of patches for them.

Joseph Piskor and Peter Nugent were the first users with the ORCHID CD3110
and also were very patient with the problems which occurred.

Anybody, who is interested in these items should have a look at 'ftp.gwdg.de',
directory 'pub/linux/cdrom' and at 'ftp.cdrom.com', directory 'pub/cdrom'.

11. PROGRAMMING ADD ONs: cdplay.c
You can use the ioctl-functions included in aztcd.c in your own programs. As
an example on how to do this, you will find a tiny CD Player for audio CDs 
named 'cdplay.c'. It allows you to play audio CDs. You can play a specified 
track, pause and resume or skip tracks forward and backwards. If you quit the 
program without stopping the  drive, playing is continued. You can also 
(mis)use cdplay to read and hexdump data disks.
'cdplay.c' can be found as a separate file in package AZTECH.CDROM.Vxx.tgz.
If you don't have it, you can find the code in the APPENDIX of this file,
which you should cut out with an editor and store in a separate file
'cdplay.c'. To compile it and make it executable, do
  gcc -s -Wall -O2 -L/usr/lib cdplay.c -o /usr/local/bin/cdplay # compiles it
  chmod +755 /usr/local/bin/cdplay                              # makes it executable
  ln -s /dev/aztcd0 /dev/cdrom                                  # creates a link
   (for /usr/lib substitute the top level directory, where your include files 
    reside,  and for /usr/local/bin the directory, where you want the executable 
    binary to reside )

You have to set the correct permissions for cdplay *and* for /dev/mcd0 or
/dev/aztcd0 in order to use it. Remember, that you should not have /dev/cdrom 
mounted, when you're playing audio CDs. 

This program is just a hack for testing the ioctl-functions in aztcd.c, I will 
not maintain it, so if you run into problems, discard it or have a look into 
the source code 'cdplay.c'. The program does only contain a minimum of user 
protection and input error detection. If you use the commands in the wrong 
order or if you try to read a CD at wrong addresses, you may get error messages
or even hang your machine. If you get STEN_LOW, STEN_LOW_WAIT or segment violation 
error messages when using cdplay, after that, the system might not be stable 
any more, so you'd better reboot. As the ioctl-functions run in kernel mode,
most normal Linux-multitasking protection features do not work. By using
uninitialized 'wild' pointers etc., it is easy to write to other users data and
program areas, destroy kernel tables etc.. So if you experiment with ioctls
as always when you are doing systems programming and kernel hacking, you
should have a backup copy of your system in a safe place (and you also
should try before, how to restore from a backup copy)!


Werner Zimmermann
Fachhochschule fuer Technik Esslingen
(EMail: zimmerma@rz.fht-esslingen.de)
Jan. 8, 1994

---------------------------------------------------------------------------
APPENDIX: Source code of cdplay.c

/* Tiny Audio CD Player

   Copyright 1994, 1995 Werner Zimmermann (zimmerma@rz.fht-esslingen.de)

This program originally was written to test the audio functions of the
AZTECH.CDROM-driver, but it should work with every CD-ROM drive. Before 
using it, you should set a symlink from /dev/cdrom to your real CDROM
device.

The GNU General Public License applies to this program.

History:  V0.1  W.Zimmermann: First release. Nov. 8, 1994
          V0.2  W.Zimmermann: Enhanced functionality. Nov. 9, 1994
          V0.3  W.Zimmermann: Additional functions. Nov. 28, 1994          
          V0.4  W.Zimmermann: fixed some bugs. Dec. 17, 1994
          V0.5  W.Zimmermann: clean 'scanf' commands without compiler warnings
                              Jan. 6, 1995
          V0.6  W.Zimmermann: volume control (still experimental). Jan. 24, 1995
*/

#include <stdio.h>
#include <ctype.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <linux/cdrom.h>
#include <linux/aztcd.h>

void help(void)
{ printf("Available Commands:  STOP         s      EJECT        e       QUIT         q\n");
  printf("                     PLAY TRACK   t      PAUSE        p       RESUME       r\n");
  printf("                     NEXT TRACK   n      REPEAT LAST  l       HELP         h\n");
  printf("                     SUB CHANNEL  c      TRACK INFO   i       PLAY AT      a\n");
  printf("                     READ         d      READ RAW     w       VOLUME       v\n");
}

int main(void)
{ int handle;
  unsigned char command=' ', ini=0, first=1, last=1;
  unsigned int cmd, i,j,k, arg1,arg2,arg3;
  struct cdrom_ti       ti;
  struct cdrom_tochdr   tocHdr;
  struct cdrom_subchnl  subchnl;
  struct cdrom_tocentry entry;
  struct cdrom_msf      msf;
  union  { struct cdrom_msf msf;
           unsigned char buf[2336];
         } azt;
  struct cdrom_volctrl  volctrl;

  printf("\nMini-Audio CD-Player V0.6   (C) 1994,1995  W.Zimmermann\n");
  handle=open("/dev/cdrom",O_RDWR);
  ioctl(handle,CDROMRESUME);
  
  if (handle<=0) 
    { printf("Drive Error: already playing, no audio disk, door open\n");
      printf("             or no permission (you must be ROOT in order to use this program)\n");
    }
  else
    { help();
      while (1)
        { printf("Type command (h = help):  ");
          scanf("%s",&command); 
          switch (command)
            { case 'e':   cmd=CDROMEJECT;
                          ioctl(handle,cmd);
                          break;
              case 'p':   if (!ini)
                             { printf("Command not allowed - play track first\n");
                             }
                          else
                             { cmd=CDROMPAUSE;
                               if (ioctl(handle,cmd)) printf("Drive Error\n");
                             }
                          break;
              case 'r':   if (!ini)
                             { printf("Command not allowed - play track first\n");
                             }
                          else
                             { cmd=CDROMRESUME;
                               if (ioctl(handle,cmd)) printf("Drive Error\n");
                             }
                          break;
              case 's':   cmd=CDROMPAUSE;
                          if (ioctl(handle,cmd)) printf("Drive error or already stopped\n");
                          ini=0;
                          cmd=CDROMSTOP;
                          if (ioctl(handle,cmd)) printf("Drive error\n");
                          ini=0;
                          break;
              case 't':   cmd=CDROMREADTOCHDR;
                          if (ioctl(handle,cmd,&tocHdr)) printf("Drive Error\n");
                          first=tocHdr.cdth_trk0;
                          last= tocHdr.cdth_trk1;
                          if ((first==0)||(first>last))
                            { printf ("--could not read TOC\n");
                            }
                          else
                            { printf("--first track: %d   --last track: %d   --enter track number: ",first,last);
                              cmd=CDROMPLAYTRKIND;
                              scanf("%i",&arg1);
                              ti.cdti_trk0=arg1;
                              if (ti.cdti_trk0<first) ti.cdti_trk0=first;
                              if (ti.cdti_trk0>last)  ti.cdti_trk0=last;
                              ti.cdti_ind0=0;
                              ti.cdti_trk1=last;
                              ti.cdti_ind1=0;
                              if (ioctl(handle,cmd,&ti)) printf("Drive Error\n");
                              ini=1;
                            } 
                          break;
              case 'n':   if (!ini++) 
                            { if (ioctl(handle,CDROMREADTOCHDR,&tocHdr)) printf("Drive Error\n");
                              first=tocHdr.cdth_trk0;
                              last= tocHdr.cdth_trk1;
                              ti.cdti_trk0=first-1;
                            }
                          if ((first==0)||(first>last))
                            { printf ("--could not read TOC\n");
                            }
                          else
                            { cmd=CDROMPLAYTRKIND;
                              if (++ti.cdti_trk0 > last)  ti.cdti_trk0=last;
                              ti.cdti_ind0=0;
                              ti.cdti_trk1=last;
                              ti.cdti_ind1=0;
                              if (ioctl(handle,cmd,&ti)) printf("Drive Error\n");
                              ini=1;
                            }
                          break;
              case 'l':   if (!ini++)
                            { if (ioctl(handle,CDROMREADTOCHDR,&tocHdr)) printf("Drive Error\n");
                              first=tocHdr.cdth_trk0;
                              last= tocHdr.cdth_trk1;
                              ti.cdti_trk0=first+1;
                            }
                          if ((first==0)||(first>last))
                            { printf ("--could not read TOC\n");
                            }
                          else
                            { cmd=CDROMPLAYTRKIND;
                              if (--ti.cdti_trk0 < first) ti.cdti_trk0=first;
                              ti.cdti_ind0=0;
                              ti.cdti_trk1=last;
                              ti.cdti_ind1=0;
                              if (ioctl(handle,cmd,&ti)) printf("Drive Error\n");
                              ini=1;
                            }  
                          break;
              case 'c':   subchnl.cdsc_format=CDROM_MSF;
                          if (ioctl(handle,CDROMSUBCHNL,&subchnl)) 
                            printf("Drive Error\n");
                          else
                            { printf("AudioStatus:%s   Track:%d  Mode:%d   MSF=%d:%d:%d\n", \
                              subchnl.cdsc_audiostatus==CDROM_AUDIO_PLAY ? "PLAYING":"NOT PLAYING",\
                              subchnl.cdsc_trk,subchnl.cdsc_adr, \
                              subchnl.cdsc_absaddr.msf.minute, subchnl.cdsc_absaddr.msf.second, \
                              subchnl.cdsc_absaddr.msf.frame);
                            }
                          break;              
              case 'i':   if (!ini)
                            { printf("Command not allowed - play track first\n");
                            }
                          else
                            { cmd=CDROMREADTOCENTRY;
                              printf("Track No.: ");
                              scanf("%d",&arg1);
                              entry.cdte_track=arg1;
                              if (entry.cdte_track<first) entry.cdte_track=first;
                              if (entry.cdte_track>last)  entry.cdte_track=last;
			      entry.cdte_format=CDROM_MSF;
                              if (ioctl(handle,cmd,&entry)) 
                               { printf("Drive error or invalid track no.\n");
                               }
                              else
                               { printf("Mode %d Track, starts at %d:%d:%d\n", \
                               entry.cdte_adr,entry.cdte_addr.msf.minute, \
                               entry.cdte_addr.msf.second,entry.cdte_addr.msf.frame);
                               }
                            }
                          break;
              case 'a':   cmd=CDROMPLAYMSF;
                          printf("Address (min:sec:frame)  ");
                          scanf("%d:%d:%d",&arg1,&arg2,&arg3);
                          msf.cdmsf_min0  =arg1;
                          msf.cdmsf_sec0  =arg2;
                          msf.cdmsf_frame0=arg3;
                          if (msf.cdmsf_sec0  > 59) msf.cdmsf_sec0  =59;
                          if (msf.cdmsf_frame0> 74) msf.cdmsf_frame0=74;
                          msf.cdmsf_min1=60;
                          msf.cdmsf_sec1=00;
                          msf.cdmsf_frame1=00;
                          if (ioctl(handle,cmd,&msf)) 
                           { printf("Drive error or invalid address\n");
                           }
                          break;
#ifdef AZT_PRIVATE_IOCTLS /*not supported by every CDROM driver*/
              case 'd':   cmd=CDROMREADMODE1;
                          printf("Address (min:sec:frame)  ");
                          scanf("%d:%d:%d",&arg1,&arg2,&arg3);
                          azt.msf.cdmsf_min0  =arg1;
                          azt.msf.cdmsf_sec0  =arg2;
                          azt.msf.cdmsf_frame0=arg3;
                          if (azt.msf.cdmsf_sec0  > 59) azt.msf.cdmsf_sec0  =59;
                          if (azt.msf.cdmsf_frame0> 74) azt.msf.cdmsf_frame0=74;
                          if (ioctl(handle,cmd,&azt.msf)) 
                           { printf("Drive error, invalid address or unsupported command\n");
                           }
                          k=0;
                          getchar();
                          for (i=0;i<128;i++)
                           { printf("%4d:",i*16);
                             for (j=0;j<16;j++)
                               { printf("%2x ",azt.buf[i*16+j]);
                               }
                             for (j=0;j<16;j++)
                               { if (isalnum(azt.buf[i*16+j])) 
                                   printf("%c",azt.buf[i*16+j]);
                                 else
                                   printf(".");
                               }
                             printf("\n"); 
                             k++;
                             if (k>=20)
                              { printf("press ENTER to continue\n");
                                getchar();
                                k=0;
                              }
                           } 
                          break;
              case 'w':   cmd=CDROMREADMODE2;
                          printf("Address (min:sec:frame)  ");
                          scanf("%d:%d:%d",&arg1,&arg2,&arg3);
                          azt.msf.cdmsf_min0  =arg1;
                          azt.msf.cdmsf_sec0  =arg2;
                          azt.msf.cdmsf_frame0=arg3;                          
                          if (azt.msf.cdmsf_sec0  > 59) azt.msf.cdmsf_sec0  =59;
                          if (azt.msf.cdmsf_frame0> 74) azt.msf.cdmsf_frame0=74;
                          if (ioctl(handle,cmd,&azt)) 
                           { printf("Drive error, invalid address or unsupported command\n");
                           }
                          k=0;
                          for (i=0;i<146;i++)
                           { printf("%4d:",i*16);
                             for (j=0;j<16;j++)
                               { printf("%2x ",azt.buf[i*16+j]);
                               }
                             for (j=0;j<16;j++)
                               { if (isalnum(azt.buf[i*16+j])) 
                                   printf("%c",azt.buf[i*16+j]);
                                 else
                                   printf(".");
                               }
                             printf("\n"); 
                             k++;
                             if (k>=20)
                              { getchar();
                                k=0;
                              }
                           } 
                          break;
#endif
              case 'v':   cmd=CDROMVOLCTRL;
                          printf("--Channel 0 Left  (0-255): ");
                          scanf("%d",&arg1);
                          printf("--Channel 1 Right (0-255): ");
                          scanf("%d",&arg2);
                          volctrl.channel0=arg1;
                          volctrl.channel1=arg2;
                          volctrl.channel2=0;
                          volctrl.channel3=0;
                          if (ioctl(handle,cmd,&volctrl)) 
                           { printf("Drive error or unsupported command\n");
                           }
                          break;  
              case 'q':   if (close(handle)) printf("Drive Error: CLOSE\n");
                          exit(0);
              case 'h':   help();
                          break;
              default:    printf("unknown command\n");
                          break;
            }
       }
    }
  return 0;
}

