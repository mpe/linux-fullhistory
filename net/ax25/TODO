af_ax25.c:ax25_connect:

	There is a race with changing the socket state here which should be
	fixed by introduction of proper socket locking:

        if (sk->state != TCP_ESTABLISHED) {
                /* Not in ABM, not in WAIT_UA -> failed */
                sock->state = SS_UNCONNECTED;
                return sock_error(sk);  /* Always set at this point */
        }

Do the ax25_list_lock, ax25_dev_lock, linkfail_lockreally, ax25_frag_lock and
listen_lock have to be interrupt safe?

A device might be deleted after lookup in the SIOCADDRT ioctl but before it's
being used.

Routes to a device begin taken down might be deleted by ax25_rt_device_down
but added by somebody else before the device has been deleted.

Introduce a clear locking strategy.  What I've put there is simply an evil
hack to get the code to survive.

Massive amounts of lock_kernel / unlock_kernel are just a temporary solution to
get around the removal of SOCKOPS_WRAP.  A serious locking strategy has to be
implemented.

The ax25_rt_find_route synopsys is pervert but I somehow had to deal with
the race caused by the static variable in it's previous implementation.

Implement proper socket locking in netrom and rose.

Check socket locking when ax25_rcv is sending to raw sockets.  In particular
ax25_send_to_raw() seems fishy.  Heck - ax25_rcv is fishy.
