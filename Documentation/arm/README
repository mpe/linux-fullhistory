			   ARM Linux 2.2.3
			   ===============

      * NOTE * The ARM support in the mainstream Linux kernel sources
    is not up to date.  Please check ftp.arm.uk.linux.org:/pub/armlinux
                             for latest updates.

Compilation of kernel
---------------------

  In order to compile ARM Linux, you will need a compiler capable of
  generating ARM ELF code with GNU extensions.  GCC-2.7.2.2 ELF, GCC 2.8.1
  and EGCS are good compilers.  Note that GCC-2.7.2.2 ELF is rare, and
  you probably don't have it.

  To build ARM Linux natively, you shouldn't have to alter the ARCH = line in
  the top level Makefile.  However, if you don't have the ARM Linux ELF tools
  installed as default, then you should change the CROSS_COMPILE line as
  detailed below.

  If you wish to cross-compile, then alter the following lines in the top
  level make file:

    ARCH = <whatever>
	with
    ARCH = arm

	and

    CROSS_COMPILE=
	to
    CROSS_COMPILE=<your-path-to-your-compiler-without-gcc>
	eg.
    CROSS_COMPILE=arm-linux-

  Do a 'make config', followed by 'make dep', and finally 'make Image' to
  build the kernel (arch/arm/boot/Image).  A compressed image can be built
  by doing a 'make zImage' instead of 'make Image'.


Bug reports etc
---------------

  Please send patches, bug reports and code for the ARM Linux project
  to linux@arm.linux.org.uk  Patches will not be included into future
  kernels unless they come to me (or the relevant person concerned).

  When sending bug reports, please ensure that they contain all relevant
  information, eg. the kernel messages that were printed before/during
  the problem, what you were doing, etc.

  For patches, please include some explanation as to what the patch does
  and why (if relevant).


Modules
-------

  Although modularisation is supported (and required for the FP emulator),
  each module on an arm2/arm250/arm3 machine when is loaded will take
  memory up to the next 32k boundary due to the size of the pages.  Hence is
  modularisation on these machines really worth it?

  However, arm6 and up machines allow modules to take multiples of 4k, and
  as such Acorn RiscPCs and other architectures using these processors can
  make good use of modularisation.


ADFS Image files
----------------

  You can access image files on your ADFS partitions by mounting the ADFS
  partition, and then using the loopback device driver.  You must have
  losetup installed.

  Please note that the PCEmulator DOS partitions have a partition table at
  the start, and as such, you will have to give '-o offset' to losetup.


Request to developers
---------------------

  When writing device drivers which include a separate assembler file, please
  include it in with the C file, and not the arch/arm/lib directory.  This
  allows the driver to be compiled as a loadable module without requiring
  half the code to be compiled into the kernel image.

  In general, try to avoid using assembler unless it is really necessary.  It
  makes drivers far less easy to port to other hardware.


ST506 hard drives
-----------------

  The ST506 hard drive controllers seem to be working fine (if a little
  slowly).  At the moment they will only work off the controllers on an
  A4x0's motherboard, but for it to work off a Podule just requires
  someone with a podule to add the addresses for the IRQ mask and the
  HDC base to the source.

  As of 31/3/96 it works with two drives (you should get the ADFS
  *configure harddrive set to 2). I've got an internal 20MB and a great
  big external 5.25" FH 64MB drive (who could ever want more :-) ).

  I've just got 240K/s off it (a dd with bs=128k); thats about half of what
  RiscOS gets; but it's a heck of a lot better than the 50K/s I was getting
  last week :-)

  Known bug: Drive data errors can cause a hang; including cases where
  the controller has fixed the error using ECC. (Possibly ONLY
  in that case...hmm).


1772 Floppy
-----------
  This also seems to work OK, but hasn't been stressed much lately.  It
  hasn't got any code for disc change detection in there at the moment which
  could be a bit of a problem!  Suggestions on the correct way to do this
  are welcome.


Kernel entry (head-armv.S)
--------------------------
  The initial entry into the kernel made via head-armv.S uses architecture
  independent code.  The architecture is selected by the value of 'r1' on
  entry, which must be kept unique.  You can register a new architecture
  by mailing the following details to rmk@arm.uk.linux.org.  Please give
  the mail a subject of 'Register new architecture':

    Name: <name of your architecture>
    ARCHDIR: <name of include/asm-arm/arch-* directory>
    Description:
    <description of your architecture>

  Please follow this format - it is an automated system.  You should
  receive a reply the next day.

---
Russell King (27/03/1999)
