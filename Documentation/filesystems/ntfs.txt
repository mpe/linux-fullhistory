NTFS Overview
=============

To mount an NTFS 1.2/3.x (Windows NT4/2000/XP) volume, use the filesystem
type 'ntfs'. The driver currently works only in read-only mode, with no
fault-tolerance supported.

For ftdisk support, limited success was reported with volume sets on top of
the md driver, although mirror and stripe sets should work as well - if the
md driver can be talked into using the same layout as Windows NT. However,
using the md driver will fail if any of your NTFS partitions have an odd
number of sectors.

Supported mount options
=======================

iocharset=name		Deprecated option. Still supported but please use
			nls=name in the future. See description for nls=name.

nls=name		Character set to use when returning file names.
			Unlike VFAT, NTFS suppresses names that contain
			unconvertible characters. Note that most character
			sets contain insufficient characters to represent all
			possible Unicode characters that can exist on NTFS. To
			be sure you are not missing any files, you are advised
			to use nls=utf8 which is capable of representing all
			Unicode characters.

utf8=<bool>		Option no longer supported. Currently mapped to
			nls=utf8 but please use nls=utf8 in the future and
			make sure utf8 is compiled either as module or into
			the kernel. See description for nls=name.

uid=
gid=
umask=			Provide default owner, group, and access mode mask.
			These options work as documented in mount(8). By
			default, the files/directories are owned by root and
			he/she has read, write, and execute permissions. No one
			else has any access permissions. I.e. the mode on all
			files and directories is by default rwx------, a
			consequence of the default umask=0077. Using a
			umask of zero will grant all permissions to everyone,
			i.e. all files and directories will have mode rwxrwxrwx.

fmask=
dmask=			Instead of specifying umask which applies both to
			files and directories, fmask applies only to files and
			dmask only to directories.

sloppy=<BOOL>		If sloppy is specified, ignore unknown mount options.
			Otherwise the default behaviour is to abort mount if
			any unknown options are found.

posix=<bool>		Deprecated option. Still supported but please use
			show_inodes=posix in the future. See description for
			show_inodes=opt.

show_sys_files=<bool>	Deprecated option. Still supported but please use
			show_inodes=system in the future. See description for
			show_inodes=opt.

show_inodes=opt		Allows choice of which types of inode names readdir()
			returns, i.e. this affects what "ls" shows. Following
			values can be used for "opt":
			   system: show system files
			   win32:  long file names (includes POSIX) [DEFAULT]
			   long:   same as win32
			   dos:    short file names only (excludes POSIX)
			   short:  same as dos
			   posix:  same as both win32 and dos
			   all:    all file names
			Note that the options are additive, i.e. specifying:
			   show_inodes=system,show_inodes=win32,show_inodes=dos
			is the same as specifying:
			   show_inodes=all
			Note that the "posix" and "all" options will show all
			directory names, BUT the link count on each directory
			inode entry is set to 1, due to Linux not supporting
			directory hard links. This may well confuse some
			user space applications, since the directory names will
			have the same inode numbers. Thus it is NOT advisable
			to use the "posix" and "all" options. We provide them
			only for completeness sake.
			Further, note that the "system" option will not show
			"$MFT" due to bugs/mis-features in glibc. Even though
			it does not show, you can specifically "ls" it:
				ls -l \$MFT
			And of course you can stat it, too.
			Further, note that irrespective of what show_inodes
			option(s) you use, all files are accessible when you
			specify the correct name, even though they may not be
			shown in a normal "ls", i.e. you can always access the
			system files and both the short and long file names of
			files and directories.
			Finally, note that win32 and dos file names are not
			case sensitive and can be accessed using any
			combination of lower and upper case, while POSIX file
			names are case sensitive and they can only be accessed
			given the correct case.

errors=opt		What to do when critical file system errors are found.
			Following values can be used for "opt":
			  continue: DEFAULT, try to clean-up as much as
				    possible, e.g. marking a corrupt inode as
				    bad so it is no longer accessed, and then
				    continue.
			  recover:  At present only supported is recovery of
				    the boot sector from the backup copy. If a
				    read-only mount, the recovery is done in
				    memory only and not written to disk.
			Note that the options are additive, i.e. specifying:
			   errors=continue,errors=recover
			This means the driver will attempt to recover and if
			that fails it will clean-up as much as possible and
			continue.

mft_zone_multiplier=	Set the MFT zone multiplier for the volume (this
			setting is not persistent across mounts and can be
			changed from mount to mount but cannot be changed on
			remount). Values of 1 to 4 are allowed, 1 being the
			default. The MFT zone multiplier determines how much
			space is reserved for the MFT on the volume. If all
			other space is used up, then the MFT zone will be
			shrunk dynamically, so this has no impact on the
			amount of free space. However, it can have an impact
			on performance by affecting fragmentation of the MFT.
			In general use the default. If you have a lot of small
			files then use a higher value. The values have the
			following meaning:
			      Value	     MFT zone size (% of volume size)
				1		12.5%
				2		25%
				3		37.5%
				4		50%
			Note this option is irrelevant for read-only mounts.

Features
========

- This is a complete rewrite of the NTFS driver that used to be in the kernel.
  This new driver implements NTFS read support and is functionally equivalent
  to the old ntfs driver.
- The new driver has full support for sparse files on NTFS 3.x volumes which
  the old driver isn't happy with.
- The new driver supports execution of binaries due to mmap() now being
  supported.
- A comparison of the two drivers using:
	time find . -type f -exec md5sum "{}" \;
  run three times in sequence with each driver (after a reboot) on a 1.4GiB
  NTFS partition, showed the new driver to be 20% faster in total time elapsed
  (from 9:43 minutes on average down to 7:53). The time spent in user space
  was unchanged but the time spent in the kernel was decreased by a factor of
  2.5 (from 85 CPU seconds down to 33).

Known bugs and (mis-)features
=============================

- None

Please send bug reports/comments/feedback/abuse to the Linux-NTFS development
list at sourceforge: linux-ntfs-dev@lists.sourceforge.net

ChangeLog
=========

Note that a technical ChangeLog aimed at kernel hackers is in fs/ntfs/ChangeLog.

2.0.1:
	- Minor updates, primarily set the executable bit by default on files
	  so they can be executed.

2.0.0:
	- Started ChangeLog.

