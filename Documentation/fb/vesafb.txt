
what is vesafb?
===============

This is a generic driver for a graphic framebuffer on intel boxes.

Idea is simple:  Turn on graphics mode at boot time with the help of
the BIOS, and use this as framebuffer device /dev/fb0, like the m68k
(and other) ports do.

This means we decide at boot time whenever we want to run in text or
graphics mode.  Switching mode later on (in protected mode) is
impossible, BIOS calls work in real mode only.  VESA BIOS Extentions
Version 2.0 are required, becauce we need a linear frame buffer.

Advantages:

 * It provides a nice large console (128 cols + 48 lines with 1024x768)
   without using tiny, unreadable fonts.
 * You can run XF68_FBDev on top of /dev/fb0 (=> non-accelerated X11
   support for every VBE 2.0 compliant graphics board).
 * Most important: boot logo :-)

Disadvantages:

 * graphic mode is slower than text mode...


How to use it?
==============

Switching modes is done using the vga=... boot parameter.  Read
Documentation/svga.txt for details.

You should compile in both vgacon (for text mode) and vesafb (for
graphics mode).   Which of them takes over the console depends on
whenever the specified mode is text or graphics.

The graphic modes are NOT in the list which you get if you boot with
vga=ask and hit return.  Here are some mode numbers:

    | 640x480  800x600  1024x768 1280x1024
----+-------------------------------------
256 |  0x101    0x103    0x105    0x107   
32k |  0x110    0x113    0x116    0x119   
64k |  0x111    0x114    0x117    0x11A   
16M |  0x112    0x115    0x118    0x11B   

This are the VESA mode numbers.  The video mode select code expects
0x200 + VESA mode number.  Therefore you have to enter "305" at the
"vga=ask" prompt to boot into 1024x768x8.

If this does'nt work, this might be becauce your BIOS does not support
linear framebuffers or becauce it does'nt support this mode at all.
Even if your board does, it might be the BIOS does not.  VESA BIOS
Extentions v2.0 are required, 1.2 is NOT sufficient.  You'll get a
"bad mode number" message if something goes wrong.

Note: LILO can't handle hex, for booting directly with "vga=mode-number"
      you have to transform the numbers to decimal.


X11
===

XF68_FBDev should work just fine, but it is non-accelerated.  Running
another (accelerated) X-Server like XF86_SVGA might or might not work.
It depends on X-Server and graphics board.

The X-Server must restore the video mode correctly, else you end up
with a broken console (and vesafb can't do anything about this).


Configuration
=============

You can pass kernel command line options to vesafb with
"video=vesa:option1".  Multiple options should be separated
by comma.  Accepted options:

invers	- no comment...
redraw	- scroll by redrawing the affected part of the screen
ypan    - enable display panning using the VESA protected mode
	  interface.  This enables the Shift-PgUp scrollback 
	  thing and greatly speeds up fullscreen scrolling.
	  It is slower than "redraw" when scrolling only a halve
	  screen.  This is the default.
ywrap	- If your gfx board supports wrap-around, use this one
	  instead of ypan. 
nopal	- Don't use the protected mode interface for palette
	  changes.  vesafb will try the standard vga registers
	  instead.


Have fun!

  Gerd

--
Gerd Knorr <kraxel@cs.tu-berlin.de>
