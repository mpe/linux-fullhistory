#
# For a description of the syntax of this configuration file,
# see the Configure script.
#
mainmenu_name "Linux Kernel Configuration"

mainmenu_option next_comment
comment 'Code maturity level options'
bool 'Prompt for development and/or incomplete code/drivers' CONFIG_EXPERIMENTAL
endmenu

mainmenu_option next_comment
comment 'Machine selection'
bool 'Support for Acer PICA 1 chipset' CONFIG_ACER_PICA_61
if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
  bool 'Support for Algorithmics P4032' CONFIG_ALGOR_P4032
fi
bool 'Support for Mips Magnum 4000' CONFIG_MIPS_MAGNUM_4000
bool 'Support for Olivetti M700-10' CONFIG_OLIVETTI_M700
bool 'Support for SGI workstations' CONFIG_SGI
bool 'Support for SNI RM200 PCI' CONFIG_SNI_RM200_PCI

#
# Select some configuration options automatically for certain systems.
#
unset CONFIG_PCI
unset CONFIG_MIPS_JAZZ
unset CONFIG_VIDEO_G364

if [ "$CONFIG_ALGOR_P4032" = "y" ]; then
	define_bool CONFIG_PCI y
fi
if [ "$CONFIG_MIPS_MAGNUM_4000" = "y" -o \
     "$CONFIG_OLIVETTI_M700" = "y" ]; then
	define_bool CONFIG_MIPS_JAZZ y
	define_bool CONFIG_VIDEO_G364 y
	define_bool CONFIG_VGA_CONSOLE y
fi
if [ "$CONFIG_ACER_PICA_61" = "y" ]; then
	define_bool CONFIG_MIPS_JAZZ y
fi
if [ "$CONFIG_SNI_RM200_PCI" = "y" ]; then
	define_bool CONFIG_VGA_CONSOLE y
	define_bool CONFIG_PCI y
fi
endmenu

mainmenu_option next_comment
comment 'CPU selection'

choice 'CPU type' \
	"R3000 CONFIG_CPU_R3000	\
	 R6000 CONFIG_CPU_R6000	\
	 R4300 CONFIG_CPU_R4300	\
	 R4x00 CONFIG_CPU_R4X00	\
	 R5000 CONFIG_CPU_R5000	\
	 R56x0 CONFIG_CPU_NEVADA \
	 R8000 CONFIG_CPU_R8000	\
	 R10000 CONFIG_CPU_R10000" R4x00
endmenu

mainmenu_option next_comment
comment 'General setup'
if [ "$CONFIG_DECSTATION" = "y" ]; then
  bool 'Compile the kernel into the ECOFF object format' CONFIG_ECOFF_KERNEL
  define_bool CONFIG_CPU_LITTLE_ENDIAN y
else
  define_bool CONFIG_ELF_KERNEL y
  bool 'Generate little endian code' CONFIG_CPU_LITTLE_ENDIAN
fi

if [ "$CONFIG_CPU_LITTLE_ENDIAN" = "n" ]; then
  define_bool CONFIG_BINFMT_IRIX y
  define_bool CONFIG_FORWARD_KEYBOARD y
fi
define_bool CONFIG_BINFMT_AOUT n
define_bool CONFIG_BINFMT_ELF y
tristate 'Kernel support for MISC binaries' CONFIG_BINFMT_MISC
if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
  tristate 'Kernel support for MISC binaries' CONFIG_BINFMT_MISC
  tristate 'Kernel support for JAVA binaries (obsolete)' CONFIG_BINFMT_JAVA
fi

bool 'Networking support' CONFIG_NET
bool 'System V IPC' CONFIG_SYSVIPC
bool 'BSD Process Accounting' CONFIG_BSD_PROCESS_ACCT
bool 'Sysctl support' CONFIG_SYSCTL

if [ "$CONFIG_SGI" != "y" ]; then
  tristate 'Parallel port support' CONFIG_PARPORT
fi
endmenu

mainmenu_option next_comment
comment 'Loadable module support'
bool 'Enable loadable module support' CONFIG_MODULES
if [ "$CONFIG_MODULES" = "y" ]; then
  bool 'Set version information on all symbols for modules' CONFIG_MODVERSIONS
  bool 'Kernel module loader' CONFIG_KMOD
fi

if [ "$CONFIG_EXPERIMENTAL" = "y" ]; then
  bool 'Support for frame buffer devices (EXPERIMENTAL)' CONFIG_FB
fi

endmenu

source drivers/block/Config.in

if [ "$CONFIG_NET" = "y" ]; then
  source net/Config.in
fi

mainmenu_option next_comment
comment 'SCSI support'

tristate 'SCSI support' CONFIG_SCSI

if [ "$CONFIG_SCSI" != "n" ]; then
	if [ "$CONFIG_SGI" = "y" ]; then
		comment 'SCSI support type (disk, tape, CDrom)'

		dep_tristate 'SCSI disk support' CONFIG_BLK_DEV_SD $CONFIG_SCSI
		dep_tristate 'SCSI tape support' CONFIG_CHR_DEV_ST $CONFIG_SCSI
		dep_tristate 'SCSI CDROM support' CONFIG_BLK_DEV_SR $CONFIG_SCSI
		dep_tristate 'SCSI generic support' CONFIG_CHR_DEV_SG $CONFIG_SCSI

		comment 'Some SCSI devices (e.g. CD jukebox) support multiple LUNs'

		bool 'Probe all LUNs on each SCSI device' CONFIG_SCSI_MULTI_LUN

		bool 'Verbose SCSI error reporting' CONFIG_SCSI_CONSTANTS

		#mainmenu_option next_comment
		comment 'SCSI low-level drivers'

		dep_tristate 'SGI wd93 Scsi Driver' CONFIG_SCSI_SGIWD93 $CONFIG_SCSI
	else
		source drivers/scsi/Config.in
	fi
fi
endmenu

if [ "$CONFIG_NET" = "y" ]; then
  mainmenu_option next_comment
  comment 'Network device support'

  bool 'Network device support' CONFIG_NETDEVICES
  if [ "$CONFIG_NETDEVICES" = "y" ]; then
    if [ "$CONFIG_SGI" != "y" ]; then
	source drivers/net/Config.in
    else
	tristate 'Dummy net driver support' CONFIG_DUMMY
	tristate 'SLIP (serial line) support' CONFIG_SLIP
	if [ "$CONFIG_SLIP" != "n" ]; then
	  bool ' CSLIP compressed headers' CONFIG_SLIP_COMPRESSED
	  bool ' Keepalive and linefill' CONFIG_SLIP_SMART
	fi
	tristate 'PPP (point-to-point) support' CONFIG_PPP
	if [ ! "$CONFIG_PPP" = "n" ]; then
	  comment 'CCP compressors for PPP are only built as modules.'
	fi
	bool 'SGI Seeq ethernet controller support' CONFIG_SGISEEQ
    fi
  fi
  endmenu
fi

if [ "$CONFIG_SGI" != "y" ]; then
	source drivers/net/hamradio/Config.in

	mainmenu_option next_comment
	comment 'ISDN subsystem'

	tristate 'ISDN support' CONFIG_ISDN
	if [ "$CONFIG_ISDN" != "n" ]; then
	  source drivers/isdn/Config.in
	fi
	endmenu

	mainmenu_option next_comment
	comment 'CD-ROM drivers (not for SCSI or IDE/ATAPI drives)'

	bool 'Support non-SCSI/IDE/ATAPI drives' CONFIG_CD_NO_IDESCSI
	if [ "$CONFIG_CD_NO_IDESCSI" != "n" ]; then
	  source drivers/cdrom/Config.in
	fi
	endmenu
fi

source drivers/char/Config.in

source fs/Config.in

source fs/nls/Config.in

comment 'Console drivers'
source drivers/video/Config.in

mainmenu_option next_comment
comment 'Sound'

tristate 'Sound card support' CONFIG_SOUND
if [ "$CONFIG_SOUND" != "n" ]; then
  source drivers/sound/Config.in
fi
endmenu

if [ "$CONFIG_SGI" = "y" ]; then
  source drivers/sgi/char/Config.in
fi

mainmenu_option next_comment
comment 'Kernel hacking'

#bool 'Debug kmalloc/kfree' CONFIG_DEBUG_MALLOC
bool 'Are you using a crosscompiler' CONFIG_CROSSCOMPILE
if [ "$CONFIG_MODULES" = "y" ]; then
  bool ' Build fp execption handler module' CONFIG_MIPS_FPE_MODULE
fi
bool 'Remote GDB kernel debugging' CONFIG_REMOTE_DEBUG
bool 'Magic SysRq key' CONFIG_MAGIC_SYSRQ
endmenu
