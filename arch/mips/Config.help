CONFIG_SMP
  This enables support for systems with more than one CPU. If you have
  a system with only one CPU, like most personal computers, say N. If
  you have a system with more than one CPU, say Y.

  If you say N here, the kernel will run on single and multiprocessor
  machines, but will use only one CPU of a multiprocessor machine. If
  you say Y here, the kernel will run on many, but not all,
  singleprocessor machines. On a singleprocessor machine, the kernel
  will run faster if you say N here.

  Note that if you say Y here and choose architecture "586" or
  "Pentium" under "Processor family", the kernel will not work on 486
  architectures. Similarly, multiprocessor kernels for the "PPro"
  architecture may not work on all Pentium based boards.

  People using multiprocessor machines who say Y here should also say
  Y to "Enhanced Real Time Clock Support", below. The "Advanced Power
  Management" code will be disabled if you say Y here.

  See also the <file:Documentation/smp.tex>,
  <file:Documentation/smp.txt>, <file:Documentation/i386/IO-APIC.txt>,
  <file:Documentation/nmi_watchdog.txt> and the SMP-HOWTO available at
  <http://www.linuxdoc.org/docs.html#howto>.

  If you don't know what to do here, say N.

CONFIG_IDE
  If you say Y here, your kernel will be able to manage low cost mass
  storage units such as ATA/(E)IDE and ATAPI units. The most common
  cases are IDE hard drives and ATAPI CD-ROM drives.

  If your system is pure SCSI and doesn't use these interfaces, you
  can say N here.

  Integrated Disk Electronics (IDE aka ATA-1) is a connecting standard
  for mass storage units such as hard disks. It was designed by
  Western Digital and Compaq Computer in 1984. It was then named
  ST506. Quite a number of disks use the IDE interface.

  AT Attachment (ATA) is the superset of the IDE specifications.
  ST506 was also called ATA-1.

  Fast-IDE is ATA-2 (also named Fast ATA), Enhanced IDE (EIDE) is
  ATA-3. It provides support for larger disks (up to 8.4GB by means of
  the LBA standard), more disks (4 instead of 2) and for other mass
  storage units such as tapes and cdrom. UDMA/33 (aka UltraDMA/33) is
  ATA-4 and provides faster (and more CPU friendly) transfer modes
  than previous PIO (Programmed processor Input/Output) from previous
  ATA/IDE standards by means of fast DMA controllers.

  ATA Packet Interface (ATAPI) is a protocol used by EIDE tape and
  CD-ROM drives, similar in many respects to the SCSI protocol.

  SMART IDE (Self Monitoring, Analysis and Reporting Technology) was
  designed in order to prevent data corruption and disk crash by
  detecting pre hardware failure conditions (heat, access time, and
  the like...). Disks built since June 1995 may follow this standard.
  The kernel itself don't manage this; however there are quite a
  number of user programs such as smart that can query the status of
  SMART parameters disk.

  If you want to compile this driver as a module ( = code which can be
  inserted in and removed from the running kernel whenever you want),
  say M here and read <file:Documentation/modules.txt>. The module
  will be called ide.o.

  For further information, please read <file:Documentation/ide.txt>.

  If unsure, say Y.

CONFIG_ACER_PICA_61
  This is a machine with a R4400 133/150 MHz CPU. To compile a Linux
  kernel that runs on these, say Y here. For details about Linux on
  the MIPS architecture, check out the Linux/MIPS FAQ on the WWW at
  <http://oss.sgi.com/mips/>.

CONFIG_ALGOR_P4032
  This is an evaluation board of the British company Algorithmics.
  The board uses the R4300 and a R5230 CPUs.  For more information
  about this board see <http://www.algor.co.uk/>.

CONFIG_BAGET_MIPS
  This enables support for the Baget, a Russian embedded system.  For
  more details about the Baget see the Linux/MIPS FAQ on
  <http://oss.sgi.com/mips/>.

CONFIG_DECSTATION
  This enables support for DEC's MIPS based workstations.  For details
  see the Linux/MIPS FAQ on <http://oss.sgi.com/mips/> and the
  DECstation porting pages on <http://decstation.unix-ag.org/>.

  If you have one of the following DECstation Models you definitely
  want to choose R4xx0 for the CPU Type:

	DECstation 5000/50
	DECstation 5000/150
	DECstation 5000/260
	DECsystem 5900/260

  otherwise choose R3000.

CONFIG_MOMENCO_OCELOT
  The Ocelot is a MIPS-based Single Board Computer (SBC) made by
  Momentum Computer <http://www.momenco.com/>.

CONFIG_DDB5074
  This enables support for the VR5000-based NEC DDB Vrc-5074
  evaluation board.

CONFIG_DDB5476
  This enables support for the R5432-based NEC DDB Vrc-5476
  evaluation board.

  Features : kernel debugging, serial terminal, NFS root fs, on-board
  ether port (Need an additional patch at <http://linux.junsun.net/>),
  USB, AC97, PCI, PCI VGA card & framebuffer console, IDE controller,
  PS2 keyboard, PS2 mouse, etc.

CONFIG_DDB5477
  This enables support for the R5432-based NEC DDB Vrc-5477
  evaluation board.

  Features : kernel debugging, serial terminal, NFS root fs, on-board
  ether port (Need an additional patch at <http://linux.junsun.net/>),
  USB, AC97, PCI, etc.

CONFIG_MIPS_ATLAS
  This enables support for the QED R5231-based MIPS Atlas evaluation
  board.

CONFIG_MIPS_MALTA
  This enables support for the VR5000-based MIPS Malta evaluation
  board.

CONFIG_MIPS_MAGNUM_4000
  This is a machine with a R4000 100 MHz CPU. To compile a Linux
  kernel that runs on these, say Y here. For details about Linux on
  the MIPS architecture, check out the Linux/MIPS FAQ on the WWW at
  <http://oss.sgi.com/mips/>.

CONFIG_QTRONIX_KEYBOARD
  Images of Qtronix keyboards are at
  <http://www.qtronix.com/keyboard.html>.

CONFIG_OLIVETTI_M700
  This is a machine with a R4000 100 MHz CPU. To compile a Linux
  kernel that runs on these, say Y here. For details about Linux on
  the MIPS architecture, check out the Linux/MIPS FAQ on the WWW at
  <http://oss.sgi.com/mips/>.

CONFIG_SNI_RM200_PCI
  The SNI RM200 PCI was a MIPS-based platform manufactured by Siemens
  Nixdorf Informationssysteme (SNI), parent company of Pyramid
  Technology and now in turn merged with Fujitsu.  Say Y here to
  support this machine type.

CONFIG_SGI_IP22
  This are the SGI Indy, Challenge S and Indigo2, as well as certain
  OEM variants like the Tandem CMN B006S. To compile a Linux kernel
  that runs on these, say Y here.

CONFIG_MIPS_GT96100
  Say Y here to support the Galileo Technology GT96100 communications
  controller card.  There is a web page at <http://www.galileot.com/>.

CONFIG_DZ
  DZ11-family serial controllers for VAXstations, including the
  DC7085, M7814, and M7819.

CONFIG_TC
  TurboChannel is a DEC (now Compaq) bus for Alpha and MIPS processors.
  Documentation on writing device drivers for TurboChannel is available at:
  <http://www.cs.arizona.edu/computer.help/policy/DIGITAL_unix/AA-PS3HD-TET1_html/TITLE.html>.

CONFIG_ZS
  Documentation on the Zilog 85C350 serial communications controller
  is downloadable at <http://www.zilog.com/pdfs/serial/z85c30.pdf>.

CONFIG_CPU_R3000
  Please make sure to pick the right CPU type. Linux/MIPS is not
  designed to be generic, i.e. Kernels compiled for R3000 CPUs will
  *not* work on R4000 machines and vice versa.  However, since most
  of the supported machines have an R4000 (or similar) CPU, R4x00
  might be a safe bet.  If the resulting kernel does not work,
  try to recompile with R3000.

  R3000    MIPS Technologies R3000-series processors,
           including the 3041, 3051, and 3081.

  R6000    MIPS Technologies R6000-series processors,
           including the 64474, 64475, 64574 and 64575.

  R4300    MIPS Technologies R4300-series processors.

  R4x00    MIPS Technologies R4000-series processors other than 4300,
           including the 4640, 4650, and 4700.

  R5000    MIPS Technologies R5000-series processors other than the
           Nevada.

  R52xx    MIPS Technologies R52xx-series ("Nevada") processors.

  R10000   MIPS Technologies R10000-series processors.

CONFIG_CPU_R6000
  MIPS Technologies R6000-series processors, including the 64474,
  64475, 64574 and 64575.

CONFIG_CPU_R4300
  MIPS Technologies R4300-series processors.

CONFIG_CPU_R4X00
  MIPS Technologies R4000-series processors other than 4300, including
  the 4640, 4650, and 4700.

CONFIG_CPU_R5000
  MIPS Technologies R5000-series processors other than the Nevada.

CONFIG_CPU_NEVADA
  MIPS Technologies R52x0-series ("Nevada") processors.

CONFIG_CPU_R10000
  MIPS Technologies R10000-series processors.

CONFIG_CPU_VR41XX
  The options selects support for the NEC VR41xx series of processors.
  Only choose this option if you have one of these processors as a
  kernel built with this option will not run on any other type of
  processor or vice versa.

CONFIG_CPU_ADVANCED
  Saying yes here allows you to select support for various features
  your CPU may or may not have.  Most people should say N here.

CONFIG_CPU_HAS_LLSC
  MIPS R4000 series and later provide the Load Linked (ll)
  and Store Conditional (sc) instructions. More information is
  available at <http://www.go-ecs.com/mips/miptek1.htm>.

  Say Y here if your CPU has the ll and sc instructions.  Say Y here
  for better performance, N if you don't know.  You must say Y here
  for multiprocessor machines.

CONFIG_CPU_HAS_LLDSCD
  Say Y here if your CPU has the lld and scd instructions, the 64-bit
  equivalents of ll and sc.  Say Y here for better performance, N if
  you don't know.  You must say Y here for multiprocessor machines.

CONFIG_CPU_HAS_WB
  Say N here for slightly better performance.  You must say Y here for
  machines which require flushing of write buffers in software.  Saying
  Y is the safe option; N may result in kernel malfunction and crashes.

CONFIG_CPU_LITTLE_ENDIAN
  Some MIPS machines can be configured for either little or big endian
  byte order. These modes require different kernels. Say Y if your
  machine is little endian, N if it's a big endian machine.

CONFIG_SGI_NEWPORT_CONSOLE
  Say Y here if you want the console on the Newport aka XL graphics
  card of your Indy.  Most people say Y here.

CONFIG_ISA
  Find out whether you have ISA slots on your motherboard.  ISA is the
  name of a bus system, i.e. the way the CPU talks to the other stuff
  inside your box.  Other bus systems are PCI, EISA, MicroChannel
  (MCA) or VESA.  ISA is an older system, now being displaced by PCI;
  newer boards don't support it.  If you have ISA, say Y, otherwise N.

CONFIG_PCI
  Find out whether you have a PCI motherboard. PCI is the name of a
  bus system, i.e. the way the CPU talks to the other stuff inside
  your box. Other bus systems are ISA, EISA, MicroChannel (MCA) or
  VESA. If you have PCI, say Y, otherwise N.

  The PCI-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>, contains valuable
  information about which PCI hardware does work under Linux and which
  doesn't.

CONFIG_MCA
  MicroChannel Architecture is found in some IBM PS/2 machines and
  laptops.  It is a bus system similar to PCI or ISA. See
  <file:Documentation/mca.txt> (and especially the web page given
  there) before attempting to build an MCA bus kernel.

CONFIG_EISA
  The Extended Industry Standard Architecture (EISA) bus was
  developed as an open alternative to the IBM MicroChannel bus.

  The EISA bus provided some of the features of the IBM MicroChannel
  bus while maintaining backward compatibility with cards made for
  the older ISA bus.  The EISA bus saw limited use between 1988 and
  1995 when it was made obsolete by the PCI bus.

  Say Y here if you are building a kernel for an EISA-based machine.

  Otherwise, say N.

CONFIG_HOTPLUG
  Say Y here if you want to plug devices into your computer while
  the system is running, and be able to use them quickly.  In many
  cases, the devices can likewise be unplugged at any time too.

  One well known example of this is PCMCIA- or PC-cards, credit-card
  size devices such as network cards, modems or hard drives which are
  plugged into slots found on all modern laptop computers.  Another
  example, used on modern desktops as well as laptops, is USB.

  Enable HOTPLUG and KMOD, and build a modular kernel.  Get agent
  software (at <http://linux-hotplug.sourceforge.net/>) and install it.
  Then your kernel will automatically call out to a user mode "policy
  agent" (/sbin/hotplug) to load modules and set up software needed
  to use devices as you hotplug them.

CONFIG_PCMCIA
  Say Y here if you want to attach PCMCIA- or PC-cards to your Linux
  computer.  These are credit-card size devices such as network cards,
  modems or hard drives often used with laptops computers.  There are
  actually two varieties of these cards: the older 16 bit PCMCIA cards
  and the newer 32 bit CardBus cards.  If you want to use CardBus
  cards, you need to say Y here and also to "CardBus support" below.

  To use your PC-cards, you will need supporting software from David
  Hinds' pcmcia-cs package (see the file <file:Documentation/Changes>
  for location).  Please also read the PCMCIA-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>.

  This driver is also available as a module ( = code which can be
  inserted in and removed from the running kernel whenever you want).
  When compiled this way, there will be modules called pcmcia_core.o
  and ds.o.  If you want to compile it as a module, say M here and
  read <file:Documentation/modules.txt>.

CONFIG_KCORE_ELF
  If you enabled support for /proc file system then the file
  /proc/kcore will contain the kernel core image. This can be used
  in gdb:

  $ cd /usr/src/linux ; gdb vmlinux /proc/kcore

  You have two choices here: ELF and A.OUT. Selecting ELF will make
  /proc/kcore appear in ELF core format as defined by the Executable
  and Linking Format specification. Selecting A.OUT will choose the
  old "a.out" format which may be necessary for some old versions
  of binutils or on some architectures.

  This is especially useful if you have compiled the kernel with the
  "-g" option to preserve debugging information. It is mainly used
  for examining kernel data structures on the live kernel so if you
  don't understand what this means or are not a kernel hacker, just
  leave it at its default value ELF.

CONFIG_BINFMT_ELF
  ELF (Executable and Linkable Format) is a format for libraries and
  executables used across different architectures and operating
  systems. Saying Y here will enable your kernel to run ELF binaries
  and enlarge it by about 13 KB. ELF support under Linux has now all
  but replaced the traditional Linux a.out formats (QMAGIC and ZMAGIC)
  because it is portable (this does *not* mean that you will be able
  to run executables from different architectures or operating systems
  however) and makes building run-time libraries very easy. Many new
  executables are distributed solely in ELF format. You definitely
  want to say Y here.

  Information about ELF is contained in the ELF HOWTO available from
  <http://www.linuxdoc.org/docs.html#howto>.

  If you find that after upgrading from Linux kernel 1.2 and saying Y
  here, you still can't run any ELF binaries (they just crash), then
  you'll have to install the newest ELF runtime libraries, including
  ld.so (check the file <file:Documentation/Changes> for location and
  latest version).

  If you want to compile this as a module ( = code which can be
  inserted in and removed from the running kernel whenever you want),
  say M here and read <file:Documentation/modules.txt>.  The module
  will be called binfmt_elf.o. Saying M or N here is dangerous because
  some crucial programs on your system might be in ELF format.

CONFIG_BINFMT_AOUT
  A.out (Assembler.OUTput) is a set of formats for libraries and
  executables used in the earliest versions of UNIX. Linux used the
  a.out formats QMAGIC and ZMAGIC until they were replaced with the
  ELF format.

  As more and more programs are converted to ELF, the use for a.out
  will gradually diminish. If you disable this option it will reduce
  your kernel by one page. This is not much and by itself does not
  warrant removing support. However its removal is a good idea if you
  wish to ensure that absolutely none of your programs will use this
  older executable format. If you don't know what to answer at this
  point then answer Y. If someone told you "You need a kernel with
  QMAGIC support" then you'll have to say Y here. You may answer M to
  compile a.out support as a module and later load the module when you
  want to use a program or library in a.out format. The module will be
  called binfmt_aout.o. Saying M or N here is dangerous though,
  because some crucial programs on your system might still be in A.OUT
  format.

CONFIG_BINFMT_MISC
  If you say Y here, it will be possible to plug wrapper-driven binary
  formats into the kernel. You will like this especially when you use
  programs that need an interpreter to run like Java, Python or
  Emacs-Lisp. It's also useful if you often run DOS executables under
  the Linux DOS emulator DOSEMU (read the DOSEMU-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>). Once you have
  registered such a binary class with the kernel, you can start one of
  those programs simply by typing in its name at a shell prompt; Linux
  will automatically feed it to the correct interpreter.

  You can do other nice things, too. Read the file
  <file:Documentation/binfmt_misc.txt> to learn how to use this
  feature, and <file:Documentation/java.txt> for information about how
  to include Java support.

  You must say Y to "/proc file system support" (CONFIG_PROC_FS) to
  use this part of the kernel.

  You may say M here for module support and later load the module when
  you have use for it; the module is called binfmt_misc.o. If you
  don't know what to answer at this point, say Y.

CONFIG_VGA_CONSOLE
  Saying Y here will allow you to use Linux in text mode through a
  display that complies with the generic VGA standard. Virtually
  everyone wants that.

  The program SVGATextMode can be used to utilize SVGA video cards to
  their full potential in text mode. Download it from
  <ftp://ibiblio.org/pub/Linux/utils/console/>.

  Say Y.

CONFIG_FB
  The frame buffer device provides an abstraction for the graphics
  hardware. It represents the frame buffer of some video hardware and
  allows application software to access the graphics hardware through
  a well-defined interface, so the software doesn't need to know
  anything about the low-level (hardware register) stuff.

  Frame buffer devices work identically across the different
  architectures supported by Linux and make the implementation of
  application programs easier and more portable; at this point, an X
  server exists which uses the frame buffer device exclusively.
  On several non-X86 architectures, the frame buffer device is the
  only way to use the graphics hardware.

  The device is accessed through special device nodes, usually located
  in the /dev directory, i.e. /dev/fb*.

  You need an utility program called fbset to make full use of frame
  buffer devices. Please read <file:Documentation/fb/framebuffer.txt>
  and the Framebuffer-HOWTO at
  <http://www.tahallah.demon.co.uk/programming/prog.html> for more
  information.

  Say Y here and to the driver for your graphics board below if you
  are compiling a kernel for a non-x86 architecture.

  If you are compiling for the x86 architecture, you can say Y if you
  want to play with it, but it is not essential. Please note that
  running graphical applications that directly touch the hardware
  (e.g. an accelerated X server) and that are not frame buffer
  device-aware may cause unexpected results. If unsure, say N.

CONFIG_FONT_8x16
  This is the "high resolution" font for the VGA frame buffer (the one
  provided by the VGA text console 80x25 mode.

  If unsure, say Y.

CONFIG_MDA_CONSOLE
  Say Y here if you have an old MDA or monochrome Hercules graphics
  adapter in your system acting as a second head ( = video card). You
  will then be able to use two monitors with your Linux system. Do not
  say Y here if your MDA card is the primary card in your system; the
  normal VGA driver will handle it.

  This driver is also available as a module ( = code which can be
  inserted and removed from the running kernel whenever you want).
  The module will be called mdacon.o. If you want to compile it as
  a module, say M here and read <file:Documentation/modules.txt>.

  If unsure, say N.

CONFIG_MODULES
  Kernel modules are small pieces of compiled code which can be
  inserted in or removed from the running kernel, using the programs
  insmod and rmmod. This is described in the file
  <file:Documentation/modules.txt>, including the fact that you have
  to say "make modules" in order to compile the modules that you chose
  during kernel configuration.  Modules can be device drivers, file
  systems, binary executable formats, and so on. If you think that you
  may want to make use of modules with this kernel in the future, then
  say Y here.  If unsure, say Y.

CONFIG_MODVERSIONS
  Usually, modules have to be recompiled whenever you switch to a new
  kernel.  Saying Y here makes it possible, and safe, to use the
  same modules even after compiling a new kernel; this requires the
  program modprobe. All the software needed for module support is in
  the modutils package (check the file <file:Documentation/Changes>
  for location and latest version).  NOTE: if you say Y here but don't
  have the program genksyms (which is also contained in the above
  mentioned modutils package), then the building of your kernel will
  fail.  If you are going to use modules that are generated from
  non-kernel sources, you would benefit from this option.  Otherwise
  it's not that important.  So, N ought to be a safe bet.

CONFIG_KMOD
  Normally when you have selected some drivers and/or file systems to
  be created as loadable modules, you also have the responsibility to
  load the corresponding modules (using the programs insmod or
  modprobe) before you can use them. If you say Y here however, the
  kernel will be able to load modules for itself: when a part of the
  kernel needs a module, it runs modprobe with the appropriate
  arguments, thereby loading the module if it is available. (This is a
  replacement for kerneld.) Say Y here and read about configuring it
  in <file:Documentation/kmod.txt>.

CONFIG_SCSI
  If you want to use a SCSI hard disk, SCSI tape drive, SCSI CD-ROM or
  any other SCSI device under Linux, say Y and make sure that you know
  the name of your SCSI host adapter (the card inside your computer
  that "speaks" the SCSI protocol, also called SCSI controller),
  because you will be asked for it.

  You also need to say Y here if you want support for the parallel
  port version of the 100 MB IOMEGA ZIP drive.

  This driver is also available as a module ( = code which can be
  inserted in and removed from the running kernel whenever you want).
  The module will be called scsi_mod.o.  If you want to compile it as
  a module, say M here and read <file:Documentation/modules.txt> and
  <file:Documentation/scsi.txt>.  However, do not compile this as a
  module if your root file system (the one containing the directory /)
  is located on a SCSI device.

CONFIG_NETDEVICES
  You can say N here if you don't intend to connect your Linux box to
  any other computer at all or if all your connections will be over a
  telephone line with a modem either via UUCP (UUCP is a protocol to
  forward mail and news between unix hosts over telephone lines; read
  the UUCP-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>) or dialing up a shell
  account or a BBS, even using term (term is a program which gives you
  almost full Internet connectivity if you have a regular dial up
  shell account on some Internet connected Unix computer. Read
  <http://www.bart.nl/~patrickr/term-howto/Term-HOWTO.html>).

  You'll have to say Y if your computer contains a network card that
  you want to use under Linux (make sure you know its name because you
  will be asked for it and read the Ethernet-HOWTO (especially if you
  plan to use more than one network card under Linux)) or if you want
  to use SLIP (Serial Line Internet Protocol is the protocol used to
  send Internet traffic over telephone lines or null modem cables) or
  CSLIP (compressed SLIP) or PPP (Point to Point Protocol, a better
  and newer replacement for SLIP) or PLIP (Parallel Line Internet
  Protocol is mainly used to create a mini network by connecting the
  parallel ports of two local machines) or AX.25/KISS (protocol for
  sending Internet traffic over amateur radio links).

  Make sure to read the NET-3-HOWTO. Eventually, you will have to read
  Olaf Kirch's excellent and free book "Network Administrator's
  Guide", to be found in <http://www.linuxdoc.org/docs.html#guide>. If
  unsure, say Y.

CONFIG_CD_NO_IDESCSI
  If you have a CD-ROM drive that is neither SCSI nor IDE/ATAPI, say Y
  here, otherwise N. Read the CD-ROM-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>.

  Note that the answer to this question doesn't directly affect the
  kernel: saying N will just cause the configurator to skip all
  the questions about these CD-ROM drives. If you are unsure what you
  have, say Y and find out whether you have one of the following
  drives.

  For each of these drivers, a file Documentation/cdrom/{driver_name}
  exists. Especially in cases where you do not know exactly which kind
  of drive you have you should read there. Most of these drivers use a
  file drivers/cdrom/{driver_name}.h where you can define your
  interface parameters and switch some internal goodies.

  All these CD-ROM drivers are also usable as a module ( = code which
  can be inserted in and removed from the running kernel whenever you
  want). If you want to compile them as module, say M instead of Y and
  read <file:Documentation/modules.txt>.

  If you want to use any of these CD-ROM drivers, you also have to
  answer Y or M to "ISO 9660 CD-ROM file system support" below (this
  answer will get "defaulted" for you if you enable any of the Linux
  CD-ROM drivers).

CONFIG_VT
  If you say Y here, you will get support for terminal devices with
  display and keyboard devices. These are called "virtual" because you
  can run several virtual terminals (also called virtual consoles) on
  one physical terminal. This is rather useful, for example one
  virtual terminal can collect system messages and warnings, another
  one can be used for a text-mode user session, and a third could run
  an X session, all in parallel. Switching between virtual terminals
  is done with certain key combinations, usually Alt-<function key>.

  The setterm command ("man setterm") can be used to change the
  properties (such as colors or beeping) of a virtual terminal. The
  man page console_codes(4) ("man console_codes") contains the special
  character sequences that can be used to change those properties
  directly. The fonts used on virtual terminals can be changed with
  the setfont ("man setfont") command and the key bindings are defined
  with the loadkeys ("man loadkeys") command.

  You need at least one virtual terminal device in order to make use
  of your keyboard and monitor. Therefore, only people configuring an
  embedded system would want to say N here in order to save some
  memory; the only way to log into such a system is then via a serial
  or network connection.

  If unsure, say Y, or else you won't be able to do much with your new
  shiny Linux system :-)

CONFIG_VT_CONSOLE
  The system console is the device which receives all kernel messages
  and warnings and which allows logins in single user mode. If you
  answer Y here, a virtual terminal (the device used to interact with
  a physical terminal) can be used as system console. This is the most
  common mode of operations, so you should say Y here unless you want
  the kernel messages be output only to a serial port (in which case
  you should say Y to "Console on serial port", below).

  If you do say Y here, by default the currently visible virtual
  terminal (/dev/tty0) will be used as system console. You can change
  that with a kernel command line option such as "console=tty3" which
  would use the third virtual terminal as system console. (Try "man
  bootparam" or see the documentation of your boot loader (lilo or
  loadlin) about how to pass options to the kernel at boot time.)

  If unsure, say Y.

CONFIG_SERIAL
  This selects whether you want to include the driver for the standard
  serial ports.  The standard answer is Y.  People who might say N
  here are those that are setting up dedicated Ethernet WWW/FTP
  servers, or users that have one of the various bus mice instead of a
  serial mouse and don't intend to use their machine's standard serial
  port for anything.  (Note that the Cyclades and Stallion multi
  serial port drivers do not need this driver built in for them to
  work.)

  If you want to compile this driver as a module, say M here and read
  <file:Documentation/modules.txt>.  The module will be called
  serial.o.
  [WARNING: Do not compile this driver as a module if you are using
  non-standard serial ports, since the configuration information will
  be lost when the driver is unloaded.  This limitation may be lifted
  in the future.]

  BTW1: If you have a mouseman serial mouse which is not recognized by
  the X window system, try running gpm first.

  BTW2: If you intend to use a software modem (also called Winmodem)
  under Linux, forget it.  These modems are crippled and require
  proprietary drivers which are only available under Windows.

  Most people will say Y or M here, so that they can use serial mice,
  modems and similar devices connecting to the standard serial ports.

CONFIG_SERIAL_CONSOLE
  If you say Y here, it will be possible to use a serial port as the
  system console (the system console is the device which receives all
  kernel messages and warnings and which allows logins in single user
  mode). This could be useful if some terminal or printer is connected
  to that serial port.

  Even if you say Y here, the currently visible virtual console
  (/dev/tty0) will still be used as the system console by default, but
  you can alter that using a kernel command line option such as
  "console=ttyS1". (Try "man bootparam" or see the documentation of
  your boot loader (lilo or loadlin) about how to pass options to the
  kernel at boot time.)

  If you don't have a VGA card installed and you say Y here, the
  kernel will automatically use the first serial line, /dev/ttyS0, as
  system console.

  If unsure, say N.

CONFIG_UNIX98_PTYS
  A pseudo terminal (PTY) is a software device consisting of two
  halves: a master and a slave. The slave device behaves identical to
  a physical terminal; the master device is used by a process to
  read data from and write data to the slave, thereby emulating a
  terminal. Typical programs for the master side are telnet servers
  and xterms.

  Linux has traditionally used the BSD-like names /dev/ptyxx for
  masters and /dev/ttyxx for slaves of pseudo terminals. This scheme
  has a number of problems. The GNU C library glibc 2.1 and later,
  however, supports the Unix98 naming standard: in order to acquire a
  pseudo terminal, a process opens /dev/ptmx; the number of the pseudo
  terminal is then made available to the process and the pseudo
  terminal slave can be accessed as /dev/pts/<number>. What was
  traditionally /dev/ttyp2 will then be /dev/pts/2, for example.

  The entries in /dev/pts/ are created on the fly by a virtual
  file system; therefore, if you say Y here you should say Y to
  "/dev/pts file system for Unix98 PTYs" as well.

  If you want to say Y here, you need to have the C library glibc 2.1
  or later (equal to libc-6.1, check with "ls -l /lib/libc.so.*").
  Read the instructions in <file:Documentation/Changes> pertaining to
  pseudo terminals. It's safe to say N.

CONFIG_UNIX98_PTY_COUNT
  The maximum number of Unix98 PTYs that can be used at any one time.
  The default is 256, and should be enough for desktop systems. Server
  machines which support incoming telnet/rlogin/ssh connections and/or
  serve several X terminals may want to increase this: every incoming
  connection and every xterm uses up one PTY.

  When not in use, each additional set of 256 PTYs occupy
  approximately 8 KB of kernel memory on 32-bit architectures.

CONFIG_MOUSE
  This is for machines with a mouse which is neither a serial nor a
  bus mouse. Examples are PS/2 mice (such as the track balls on some
  laptops) and some digitizer pads. Most people have a regular serial
  MouseSystem or Microsoft mouse (made by Logitech) that plugs into a
  COM port (rectangular with 9 or 25 pins). These people say N here.
  If you have something else, read the Busmouse-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>. This HOWTO contains
  information about all non-serial mice, not just bus mice.

  If you have a laptop, you either have to check the documentation or
  experiment a bit to find out whether the trackball is a serial mouse
  or not; it's best to say Y here for you.

  Note that the answer to this question won't directly affect the
  kernel: saying N will just cause the configurator to skip all
  the questions about non-serial mice. If unsure, say Y.

CONFIG_PSMOUSE
  The PS/2 mouse connects to a special mouse port that looks much like
  the keyboard port (small circular connector with 6 pins). This way,
  the mouse does not use any serial ports. This port can also be used
  for other input devices like light pens, tablets, keypads. Compaq,
  AST and IBM all use this as their mouse port on currently shipping
  machines. The trackballs of some laptops are PS/2 mice also. In
  particular, the C&T 82C710 mouse on TI Travelmates is a PS/2 mouse.

  Although PS/2 mice are not technically bus mice, they are explained
  in detail in the Busmouse-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>.

  When using a PS/2 mouse, you can get problems if you want to use the
  mouse both on the Linux console and under X. Using the "-R" option
  of the Linux mouse managing program gpm (available from
  <ftp://gnu.systemy.it/pub/gpm/>) solves this problem, or you can get
  the "mconv2" utility from <ftp://ibiblio.org/pub/Linux/system/mouse/>.

CONFIG_RTC
  If you say Y here and create a character special file /dev/rtc with
  major number 10 and minor number 135 using mknod ("man mknod"), you
  will get access to the real time clock (or hardware clock) built
  into your computer.

  Every PC has such a clock built in. It can be used to generate
  signals from as low as 1Hz up to 8192Hz, and can also be used
  as a 24 hour alarm. It reports status information via the file
  /proc/driver/rtc and its behaviour is set by various ioctls on
  /dev/rtc.

  If you run Linux on a multiprocessor machine and said Y to
  "Symmetric Multi Processing" above, you should say Y here to read
  and set the RTC in an SMP compatible fashion.

  If you think you have a use for such a device (such as periodic data
  sampling), then say Y here, and read <file:Documentation/rtc.txt>
  for details.

  This driver is also available as a module ( = code which can be
  inserted in and removed from the running kernel whenever you want).
  The module is called rtc.o. If you want to compile it as a module,
  say M here and read <file:Documentation/modules.txt>.

CONFIG_SOUND
  If you have a sound card in your computer, i.e. if it can say more
  than an occasional beep, say Y.  Be sure to have all the information
  about your sound card and its configuration down (I/O port,
  interrupt and DMA channel), because you will be asked for it.

  You want to read the Sound-HOWTO, available from
  <http://www.linuxdoc.org/docs.html#howto>. General information about
  the modular sound system is contained in the files
  <file:Documentation/sound/Introduction>.  The file
  <file:Documentation/sound/README.OSS> contains some slightly
  outdated but still useful information as well.

  If you have a PnP sound card and you want to configure it at boot
  time using the ISA PnP tools (read
  <http://www.roestock.demon.co.uk/isapnptools/>), then you need to
  compile the sound card support as a module ( = code which can be
  inserted in and removed from the running kernel whenever you want)
  and load that module after the PnP configuration is finished.  To do
  this, say M here and read <file:Documentation/modules.txt> as well
  as <file:Documentation/sound/README.modules>; the module will be
  called soundcore.o.

  I'm told that even without a sound card, you can make your computer
  say more than an occasional beep, by programming the PC speaker.
  Kernel patches and supporting utilities to do that are in the pcsp
  package, available at <ftp://ftp.infradead.org/pub/pcsp/>.

CONFIG_CROSSCOMPILE
  Say Y here if you are compiling the kernel on a different
  architecture than the one it is intended to run on.

CONFIG_MIPS_EV64120
  This is an evaluation board based on the Galileo GT-64120
  single-chip system controller that contains a MIPS R5000 compatible
  core running at 75/100MHz.  Their website is located at
  <http://www.galileot.com/>.  Say Y here if you wish to build a
  kernel for this platform.

CONFIG_MIPS_EV96100
  This is an evaluation board based on the Galielo GT-96100 LAN/WAN
  communications controllers containing a MIPS R5000 compatible core
  running at 83MHz. Their website is <http://www.galileot.com/>. Say Y
  here if you wish to build a kernel for this platform.

CONFIG_MIPS_ITE8172
  Ths is an evaluation board made by ITE <http://www.ite.com.tw/>
  with ATX form factor that utilizes a MIPS R5000 to work with its
  ITE8172G companion internet appliance chip. The MIPS core can be
  either a NEC Vr5432 or QED RM5231. Say Y here if you wish to build
  a kernel for this platform.

CONFIG_MIPS_IVR
  This is an evaluation board built by Globespan to showcase thir
  iVR (Internet Video Recorder) design. It utilizes a QED RM5231
  R5000 MIPS core. More information can be found out their website
  located at <http://www.globespan.net/products/product4.html>P. Say Y
  here if you wish to build a kernel for this platform.

CONFIG_MIPS_PB1000
  This is an evaluation board built by Alchemy Semiconducttor to
  showcase their Au1000 Internet Edge Processor. It is SOC design
  containing a MIPS32 core running at 266/400/500MHz with many
  integrated peripherals. Further information can be found at their
  website, <http://www.alchemysemi.com/>. Say Y here if you wish to
  build a kernel for this platform.

CONFIG_NINO
  Say Y here to select a kernel for the Philips Nino Palm PC. The
  website at <http://www.realitydiluted.com/projects/nino/index.html>
  will have more information.

CONFIG_NINO_16MB
  Say Y here to build a kernel specifically for Nino 500/501 color
  Palm PCs from Philips (INCOMPLETE).

CONFIG_NINO_8MB
  Say Y here to build a kernel specifically for Nino Palm PCs with
  8MB of memory. These include models 200/210/312/320/325/350/390.

CONFIG_NINO_4MB
  Say Y here to build a kernel specifically for Nino Palm PCs with
  4MB of memory. These include models 300/301/302/319.

CONFIG_LL_DEBUG
  Enable low-level debugging assertion macros in the kernel code.
  Currently used only by the time services code in the MIPS port.
  Don't turn this on unless you know what you are doing.

CONFIG_REMOTE_DEBUG
  If you say Y here, it will be possible to remotely debug the MIPS
  kernel using gdb. This enlarges your kernel image disk size by
  several megabytes and requires a machine with more than 16 MB,
  better 32 MB RAM to avoid excessive linking time. This is only
  useful for kernel hackers. If unsure, say N.

CONFIG_MIPS_UNCACHED
  If you say Y here there kernel will disable all CPU caches.  This will
  reduce the system's performance dramatically but can help finding
  otherwise hard to track bugs.  It can also useful if you're doing
  hardware debugging with a logic analyzer and need to see all traffic
  on the bus.

CONFIG_MAGIC_SYSRQ
  If you say Y here, you will have some control over the system even
  if the system crashes for example during kernel debugging (e.g., you
  will be able to flush the buffer cache to disk, reboot the system
  immediately or dump some status information). This is accomplished
  by pressing various keys while holding SysRq (Alt+PrintScreen). It
  also works on a serial console (on PC hardware at least), if you
  send a BREAK and then within 5 seconds a command keypress. The
  keys are documented in <file:Documentation/sysrq.txt>. Don't say Y
  unless you really know what this hack does.

CONFIG_GDB_CONSOLE
  If you are using GDB for remote debugging over a serial port and
  would like kernel messages to be formatted into GDB $O packets so
  that GDB prints them as program output, say 'Y'.

