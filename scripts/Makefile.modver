# ===========================================================================
# Module versions
# ===========================================================================

.PHONY: __modversions
__modversions:

include scripts/Makefile.lib

#

__modules := $(shell cat /dev/null $(wildcard $(MODVERDIR)/*.mod))
modules := $(patsubst %.o,%.ko,$(wildcard $(__modules:.ko=.o)))

ifneq ($(filter-out $(modules),$(__modules)),)
  $(warning *** Uh-oh, you have stale module entries. You messed with SUBDIRS,)
  $(warning     do not complain if something goes wrong.)
endif

__modversions: $(modules)
	@:

# The final module link

quiet_cmd_ld_ko_o = LD [M]  $@
      cmd_ld_ko_o = $(LD) $(LDFLAGS) $(LDFLAGS_MODULE) -o $@ 		\
			  $(filter-out FORCE,$^)

init/vermagic.o: ;

$(modules): %.ko :%.o %.ver.o init/vermagic.o FORCE
	$(call if_changed,ld_ko_o)

targets += $(modules)

# Compile version info for unresolved symbols

quiet_cmd_cc_o_c = CC      $@
      cmd_cc_o_c = $(CC) $(CFLAGS) -c -o $@ $<

$(modules:.ko=.ver.o): %.ver.o: %.ver.c FORCE
	$(call if_changed,cc_o_c)

targets += $(modules:.ko=.ver.o)

# Generate C source with version info for unresolved symbols

define rule_mkver_o_c
	echo '  MKVER   $@';						\
	( echo "#include <linux/module.h>";				\
	  echo "";							\
	  echo "static const struct modversion_info ____versions[]";	\
	  echo "__attribute__((section(\"__versions\"))) = {"; 	\
	  for sym in `nm -u $<`; do					\
		grep "\"$$sym\"" .tmp_all-versions			\
		|| echo "*** Warning: $(<:.o=.ko): \"$$sym\" unresolved!" >&2;\
	  done;								\
	  echo "};";							\
	) > $@
endef

$(modules:.ko=.ver.c): %.ver.c: %.o .tmp_all-versions FORCE
	$(call if_changed_rule,mkver_o_c)

targets += $(modules:.ko=.ver.c))

# Extract all checksums for all exported symbols

export-objs := $(shell for m in vmlinux $(modules:.ko=.o); do objdump -h $$m | grep -q __ksymtab && echo $$m; done)

cmd_gen-all-versions = mksyms $(export-objs)
define rule_gen-all-versions
	echo '  MKSYMS  $@';						\
	for mod in $(export-objs); do					\
		modname=`basename $$mod`;				\
		nm $$mod 						\
		| grep ' __crc_'					\
		| sed "s/\([^ ]*\) A __crc_\(.*\)/{ 0x\1, \"\2\" }, \/* $$modname *\//g;s/.* w __crc_\(.*\)/{ 0x0       , \"\1\" }, \/* $$modname *\//g"; \
	done > $@;							\
	echo 'cmd_$@ := $(cmd_$(1))' > $(@D)/.$(@F).cmd
endef

.tmp_all-versions: $(export-objs) FORCE
	$(call if_changed_rule,gen-all-versions)

targets += .tmp_all-versions

# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

.PHONY: FORCE

FORCE:

# Read all saved command lines and dependencies for the $(targets) we
# may be building above, using $(if_changed{,_dep}). As an
# optimization, we don't need to read them if the target does not
# exist, we will rebuild anyway in that case.

targets := $(wildcard $(sort $(targets)))
cmd_files := $(wildcard $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))

ifneq ($(cmd_files),)
  include $(cmd_files)
endif
